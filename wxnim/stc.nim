when defined(linux):
  {.passL: "`wx-config --libs stc`".}

{.deadcodeelim: on.}

import wx

{.noforward: on.}

type 
  WxScrollBar* {.importcpp: "wxScrollBar", header: "<wx/stc/stc.h>".} = object 
  
  WxMemoryBuffer* {.importcpp: "wxMemoryBuffer", header: "<wx/stc/stc.h>".} = object 
  
  WxCharBuffer* {.importcpp: "wxCharBuffer", header: "<wx/stc/stc.h>".} = object 
  


const 
  wxSTC_INVALID_POSITION* = - 1


const 
  wxSTC_START* = 2000
  wxSTC_OPTIONAL_START* = 3000
  wxSTC_LEXER_START* = 4000
  wxSTC_WS_INVISIBLE* = 0
  wxSTC_WS_VISIBLEALWAYS* = 1
  wxSTC_WS_VISIBLEAFTERINDENT* = 2
  wxSTC_EOL_CRLF* = 0
  wxSTC_EOL_CR* = 1
  wxSTC_EOL_LF* = 2


const 
  wxSTC_CP_UTF8* = 65001
  wxSTC_MARKER_MAX* = 31
  wxSTC_MARK_CIRCLE* = 0
  wxSTC_MARK_ROUNDRECT* = 1
  wxSTC_MARK_ARROW* = 2
  wxSTC_MARK_SMALLRECT* = 3
  wxSTC_MARK_SHORTARROW* = 4
  wxSTC_MARK_EMPTY* = 5
  wxSTC_MARK_ARROWDOWN* = 6
  wxSTC_MARK_MINUS* = 7
  wxSTC_MARK_PLUS* = 8


const 
  wxSTC_MARK_VLINE* = 9
  wxSTC_MARK_LCORNER* = 10
  wxSTC_MARK_TCORNER* = 11
  wxSTC_MARK_BOXPLUS* = 12
  wxSTC_MARK_BOXPLUSCONNECTED* = 13
  wxSTC_MARK_BOXMINUS* = 14
  wxSTC_MARK_BOXMINUSCONNECTED* = 15
  wxSTC_MARK_LCORNERCURVE* = 16
  wxSTC_MARK_TCORNERCURVE* = 17
  wxSTC_MARK_CIRCLEPLUS* = 18
  wxSTC_MARK_CIRCLEPLUSCONNECTED* = 19
  wxSTC_MARK_CIRCLEMINUS* = 20
  wxSTC_MARK_CIRCLEMINUSCONNECTED* = 21


const 
  wxSTC_MARK_BACKGROUND* = 22
  wxSTC_MARK_DOTDOTDOT* = 23
  wxSTC_MARK_ARROWS* = 24
  wxSTC_MARK_PIXMAP* = 25
  wxSTC_MARK_FULLRECT* = 26
  wxSTC_MARK_LEFTRECT* = 27
  wxSTC_MARK_AVAILABLE* = 28
  wxSTC_MARK_UNDERLINE* = 29
  wxSTC_MARK_RGBAIMAGE* = 30
  wxSTC_MARK_CHARACTER* = 10000


const 
  wxSTC_MARKNUM_FOLDEREND* = 25
  wxSTC_MARKNUM_FOLDEROPENMID* = 26
  wxSTC_MARKNUM_FOLDERMIDTAIL* = 27
  wxSTC_MARKNUM_FOLDERTAIL* = 28
  wxSTC_MARKNUM_FOLDERSUB* = 29
  wxSTC_MARKNUM_FOLDER* = 30
  wxSTC_MARKNUM_FOLDEROPEN* = 31
  wxSTC_MASK_FOLDERS* = 0xFE000000
  wxSTC_MARGIN_SYMBOL* = 0
  wxSTC_MARGIN_NUMBER* = 1
  wxSTC_MARGIN_BACK* = 2
  wxSTC_MARGIN_FORE* = 3
  wxSTC_MARGIN_TEXT* = 4
  wxSTC_MARGIN_RTEXT* = 5


const 
  wxSTC_STYLE_DEFAULT* = 32
  wxSTC_STYLE_LINENUMBER* = 33
  wxSTC_STYLE_BRACELIGHT* = 34
  wxSTC_STYLE_BRACEBAD* = 35
  wxSTC_STYLE_CONTROLCHAR* = 36
  wxSTC_STYLE_INDENTGUIDE* = 37
  wxSTC_STYLE_CALLTIP* = 38
  wxSTC_STYLE_LASTPREDEFINED* = 39
  wxSTC_STYLE_MAX* = 255


const 
  wxSTC_CHARSET_ANSI* = 0
  wxSTC_CHARSET_DEFAULT* = 1
  wxSTC_CHARSET_BALTIC* = 186
  wxSTC_CHARSET_CHINESEBIG5* = 136
  wxSTC_CHARSET_EASTEUROPE* = 238
  wxSTC_CHARSET_GB2312* = 134
  wxSTC_CHARSET_GREEK* = 161
  wxSTC_CHARSET_HANGUL* = 129
  wxSTC_CHARSET_MAC* = 77
  wxSTC_CHARSET_OEM* = 255
  wxSTC_CHARSET_RUSSIAN* = 204
  wxSTC_CHARSET_CYRILLIC* = 1251
  wxSTC_CHARSET_SHIFTJIS* = 128
  wxSTC_CHARSET_SYMBOL* = 2
  wxSTC_CHARSET_TURKISH* = 162
  wxSTC_CHARSET_JOHAB* = 130
  wxSTC_CHARSET_HEBREW* = 177
  wxSTC_CHARSET_ARABIC* = 178
  wxSTC_CHARSET_VIETNAMESE* = 163
  wxSTC_CHARSET_THAI* = 222
  wxSTC_CHARSET_885915* = 1000
  wxSTC_CASE_MIXED* = 0
  wxSTC_CASE_UPPER* = 1
  wxSTC_CASE_LOWER* = 2
  wxSTC_FONT_SIZE_MULTIPLIER* = 100
  wxSTC_WEIGHT_NORMAL* = 400
  wxSTC_WEIGHT_SEMIBOLD* = 600
  wxSTC_WEIGHT_BOLD* = 700


const 
  wxSTC_INDIC_PLAIN* = 0
  wxSTC_INDIC_SQUIGGLE* = 1
  wxSTC_INDIC_TT* = 2
  wxSTC_INDIC_DIAGONAL* = 3
  wxSTC_INDIC_STRIKE* = 4
  wxSTC_INDIC_HIDDEN* = 5
  wxSTC_INDIC_BOX* = 6
  wxSTC_INDIC_ROUNDBOX* = 7
  wxSTC_INDIC_STRAIGHTBOX* = 8
  wxSTC_INDIC_DASH* = 9
  wxSTC_INDIC_DOTS* = 10
  wxSTC_INDIC_SQUIGGLELOW* = 11
  wxSTC_INDIC_DOTBOX* = 12
  wxSTC_INDIC_MAX* = 31
  wxSTC_INDIC_CONTAINER* = 8
  wxSTC_INDIC0MASK* = 0x00000020
  wxSTC_INDIC1MASK* = 0x00000040
  wxSTC_INDIC2MASK* = 0x00000080
  wxSTC_INDICS_MASK* = 0x000000E0
  wxSTC_IV_NONE* = 0
  wxSTC_IV_REAL* = 1
  wxSTC_IV_LOOKFORWARD* = 2
  wxSTC_IV_LOOKBOTH* = 3


const 
  wxSTC_PRINT_NORMAL* = 0


const 
  wxSTC_PRINT_INVERTLIGHT* = 1


const 
  wxSTC_PRINT_BLACKONWHITE* = 2


const 
  wxSTC_PRINT_COLOURONWHITE* = 3


const 
  wxSTC_PRINT_COLOURONWHITEDEFAULTBG* = 4
  wxSTC_FIND_WHOLEWORD* = 2
  wxSTC_FIND_MATCHCASE* = 4
  wxSTC_FIND_WORDSTART* = 0x00100000
  wxSTC_FIND_REGEXP* = 0x00200000
  wxSTC_FIND_POSIX* = 0x00400000
  wxSTC_FOLDLEVELBASE* = 0x00000400
  wxSTC_FOLDLEVELWHITEFLAG* = 0x00001000
  wxSTC_FOLDLEVELHEADERFLAG* = 0x00002000
  wxSTC_FOLDLEVELNUMBERMASK* = 0x00000FFF
  wxSTC_FOLDFLAG_LINEBEFORE_EXPANDED* = 0x00000002
  wxSTC_FOLDFLAG_LINEBEFORE_CONTRACTED* = 0x00000004
  wxSTC_FOLDFLAG_LINEAFTER_EXPANDED* = 0x00000008
  wxSTC_FOLDFLAG_LINEAFTER_CONTRACTED* = 0x00000010
  wxSTC_FOLDFLAG_LEVELNUMBERS* = 0x00000040
  wxSTC_TIME_FOREVER* = 10000000
  wxSTC_WRAP_NONE* = 0
  wxSTC_WRAP_WORD* = 1
  wxSTC_WRAP_CHAR* = 2
  wxSTC_WRAPVISUALFLAG_NONE* = 0x00000000
  wxSTC_WRAPVISUALFLAG_END* = 0x00000001
  wxSTC_WRAPVISUALFLAG_START* = 0x00000002
  wxSTC_WRAPVISUALFLAG_MARGIN* = 0x00000004
  wxSTC_WRAPVISUALFLAGLOC_DEFAULT* = 0x00000000
  wxSTC_WRAPVISUALFLAGLOC_END_BY_TEXT* = 0x00000001
  wxSTC_WRAPVISUALFLAGLOC_START_BY_TEXT* = 0x00000002
  wxSTC_WRAPINDENT_FIXED* = 0
  wxSTC_WRAPINDENT_SAME* = 1
  wxSTC_WRAPINDENT_INDENT* = 2
  wxSTC_CACHE_NONE* = 0
  wxSTC_CACHE_CARET* = 1
  wxSTC_CACHE_PAGE* = 2
  wxSTC_CACHE_DOCUMENT* = 3


const 
  wxSTC_EFF_QUALITY_MASK* = 0x0000000F
  wxSTC_EFF_QUALITY_DEFAULT* = 0
  wxSTC_EFF_QUALITY_NON_ANTIALIASED* = 1
  wxSTC_EFF_QUALITY_ANTIALIASED* = 2
  wxSTC_EFF_QUALITY_LCD_OPTIMIZED* = 3
  wxSTC_MULTIPASTE_ONCE* = 0
  wxSTC_MULTIPASTE_EACH* = 1
  wxSTC_EDGE_NONE* = 0
  wxSTC_EDGE_LINE* = 1
  wxSTC_EDGE_BACKGROUND* = 2
  wxSTC_STATUS_OK* = 0
  wxSTC_STATUS_FAILURE* = 1
  wxSTC_STATUS_BADALLOC* = 2
  wxSTC_CURSORNORMAL* = - 1
  wxSTC_CURSORARROW* = 2
  wxSTC_CURSORWAIT* = 4
  wxSTC_CURSORREVERSEARROW* = 7


const 
  wxSTC_VISIBLE_SLOP* = 0x00000001
  wxSTC_VISIBLE_STRICT* = 0x00000004


const 
  wxSTC_CARET_SLOP* = 0x00000001


const 
  wxSTC_CARET_STRICT* = 0x00000004


const 
  wxSTC_CARET_JUMPS* = 0x00000010


const 
  wxSTC_CARET_EVEN* = 0x00000008
  wxSTC_SEL_STREAM* = 0
  wxSTC_SEL_RECTANGLE* = 1
  wxSTC_SEL_LINES* = 2
  wxSTC_SEL_THIN* = 3
  wxSTC_CASEINSENSITIVEBEHAVIOUR_RESPECTCASE* = 0
  wxSTC_CASEINSENSITIVEBEHAVIOUR_IGNORECASE* = 1
  wxSTC_CARETSTICKY_OFF* = 0
  wxSTC_CARETSTICKY_ON* = 1
  wxSTC_CARETSTICKY_WHITESPACE* = 2
  wxSTC_ALPHA_TRANSPARENT* = 0
  wxSTC_ALPHA_OPAQUE* = 255
  wxSTC_ALPHA_NOALPHA* = 256
  wxSTC_CARETSTYLE_INVISIBLE* = 0
  wxSTC_CARETSTYLE_LINE* = 1
  wxSTC_CARETSTYLE_BLOCK* = 2
  wxSTC_MARGINOPTION_NONE* = 0
  wxSTC_MARGINOPTION_SUBLINESELECT* = 1
  wxSTC_ANNOTATION_HIDDEN* = 0
  wxSTC_ANNOTATION_STANDARD* = 1
  wxSTC_ANNOTATION_BOXED* = 2
  wxSTC_UNDO_MAY_COALESCE* = 1
  wxSTC_SCVS_NONE* = 0
  wxSTC_SCVS_RECTANGULARSELECTION* = 1
  wxSTC_SCVS_USERACCESSIBLE* = 2
  wxSTC_TECHNOLOGY_DEFAULT* = 0
  wxSTC_TECHNOLOGY_DIRECTWRITE* = 1


const 
  wxSTC_KEYWORDSET_MAX* = 8
  wxSTC_TYPE_BOOLEAN* = 0
  wxSTC_TYPE_INTEGER* = 1
  wxSTC_TYPE_STRING* = 2


const 
  wxSTC_MOD_INSERTTEXT* = 0x00000001
  wxSTC_MOD_DELETETEXT* = 0x00000002
  wxSTC_MOD_CHANGESTYLE* = 0x00000004
  wxSTC_MOD_CHANGEFOLD* = 0x00000008
  wxSTC_PERFORMED_USER* = 0x00000010
  wxSTC_PERFORMED_UNDO* = 0x00000020
  wxSTC_PERFORMED_REDO* = 0x00000040
  wxSTC_MULTISTEPUNDOREDO* = 0x00000080
  wxSTC_LASTSTEPINUNDOREDO* = 0x00000100
  wxSTC_MOD_CHANGEMARKER* = 0x00000200
  wxSTC_MOD_BEFOREINSERT* = 0x00000400
  wxSTC_MOD_BEFOREDELETE* = 0x00000800
  wxSTC_MULTILINEUNDOREDO* = 0x00001000
  wxSTC_STARTACTION* = 0x00002000
  wxSTC_MOD_CHANGEINDICATOR* = 0x00004000
  wxSTC_MOD_CHANGELINESTATE* = 0x00008000
  wxSTC_MOD_CHANGEMARGIN* = 0x00010000
  wxSTC_MOD_CHANGEANNOTATION* = 0x00020000
  wxSTC_MOD_CONTAINER* = 0x00040000
  wxSTC_MOD_LEXERSTATE* = 0x00080000
  wxSTC_MODEVENTMASKALL* = 0x000FFFFF
  wxSTC_UPDATE_CONTENT* = 0x00000001
  wxSTC_UPDATE_SELECTION* = 0x00000002
  wxSTC_UPDATE_V_SCROLL* = 0x00000004
  wxSTC_UPDATE_H_SCROLL* = 0x00000008


const 
  wxSTC_KEY_DOWN* = 300
  wxSTC_KEY_UP* = 301
  wxSTC_KEY_LEFT* = 302
  wxSTC_KEY_RIGHT* = 303
  wxSTC_KEY_HOME* = 304
  wxSTC_KEY_END* = 305
  wxSTC_KEY_PRIOR* = 306
  wxSTC_KEY_NEXT* = 307
  wxSTC_KEY_DELETE* = 308
  wxSTC_KEY_INSERT* = 309
  wxSTC_KEY_ESCAPE* = 7
  wxSTC_KEY_BACK* = 8
  wxSTC_KEY_TAB* = 9
  wxSTC_KEY_RETURN* = 13
  wxSTC_KEY_ADD* = 310
  wxSTC_KEY_SUBTRACT* = 311
  wxSTC_KEY_DIVIDE* = 312
  wxSTC_KEY_WIN* = 313
  wxSTC_KEY_RWIN* = 314
  wxSTC_KEY_MENU* = 315
  wxSTC_SCMOD_NORM* = 0
  wxSTC_SCMOD_SHIFT* = 1
  wxSTC_SCMOD_CTRL* = 2
  wxSTC_SCMOD_ALT* = 4
  wxSTC_SCMOD_SUPER* = 8
  wxSTC_SCMOD_META* = 16


const 
  wxSTC_LEX_CONTAINER* = 0
  wxSTC_LEX_NULL* = 1
  wxSTC_LEX_PYTHON* = 2
  wxSTC_LEX_CPP* = 3
  wxSTC_LEX_HTML* = 4
  wxSTC_LEX_XML* = 5
  wxSTC_LEX_PERL* = 6
  wxSTC_LEX_SQL* = 7
  wxSTC_LEX_VB* = 8
  wxSTC_LEX_PROPERTIES* = 9
  wxSTC_LEX_ERRORLIST* = 10
  wxSTC_LEX_MAKEFILE* = 11
  wxSTC_LEX_BATCH* = 12
  wxSTC_LEX_XCODE* = 13
  wxSTC_LEX_LATEX* = 14
  wxSTC_LEX_LUA* = 15
  wxSTC_LEX_DIFF* = 16
  wxSTC_LEX_CONF* = 17
  wxSTC_LEX_PASCAL* = 18
  wxSTC_LEX_AVE* = 19
  wxSTC_LEX_ADA* = 20
  wxSTC_LEX_LISP* = 21
  wxSTC_LEX_RUBY* = 22
  wxSTC_LEX_EIFFEL* = 23
  wxSTC_LEX_EIFFELKW* = 24
  wxSTC_LEX_TCL* = 25
  wxSTC_LEX_NNCRONTAB* = 26
  wxSTC_LEX_BULLANT* = 27
  wxSTC_LEX_VBSCRIPT* = 28
  wxSTC_LEX_BAAN* = 31
  wxSTC_LEX_MATLAB* = 32
  wxSTC_LEX_SCRIPTOL* = 33
  wxSTC_LEX_ASM* = 34
  wxSTC_LEX_CPPNOCASE* = 35
  wxSTC_LEX_FORTRAN* = 36
  wxSTC_LEX_F77* = 37
  wxSTC_LEX_CSS* = 38
  wxSTC_LEX_POV* = 39
  wxSTC_LEX_LOUT* = 40
  wxSTC_LEX_ESCRIPT* = 41
  wxSTC_LEX_PS* = 42
  wxSTC_LEX_NSIS* = 43
  wxSTC_LEX_MMIXAL* = 44
  wxSTC_LEX_CLW* = 45
  wxSTC_LEX_CLWNOCASE* = 46
  wxSTC_LEX_LOT* = 47
  wxSTC_LEX_YAML* = 48
  wxSTC_LEX_TEX* = 49
  wxSTC_LEX_METAPOST* = 50
  wxSTC_LEX_POWERBASIC* = 51
  wxSTC_LEX_FORTH* = 52
  wxSTC_LEX_ERLANG* = 53
  wxSTC_LEX_OCTAVE* = 54
  wxSTC_LEX_MSSQL* = 55
  wxSTC_LEX_VERILOG* = 56
  wxSTC_LEX_KIX* = 57
  wxSTC_LEX_GUI4CLI* = 58
  wxSTC_LEX_SPECMAN* = 59
  wxSTC_LEX_AU3* = 60
  wxSTC_LEX_APDL* = 61
  wxSTC_LEX_BASH* = 62
  wxSTC_LEX_ASN1* = 63
  wxSTC_LEX_VHDL* = 64
  wxSTC_LEX_CAML* = 65
  wxSTC_LEX_BLITZBASIC* = 66
  wxSTC_LEX_PUREBASIC* = 67
  wxSTC_LEX_HASKELL* = 68
  wxSTC_LEX_PHPSCRIPT* = 69
  wxSTC_LEX_TADS3* = 70
  wxSTC_LEX_REBOL* = 71
  wxSTC_LEX_SMALLTALK* = 72
  wxSTC_LEX_FLAGSHIP* = 73
  wxSTC_LEX_CSOUND* = 74
  wxSTC_LEX_FREEBASIC* = 75
  wxSTC_LEX_INNOSETUP* = 76
  wxSTC_LEX_OPAL* = 77
  wxSTC_LEX_SPICE* = 78
  wxSTC_LEX_D* = 79
  wxSTC_LEX_CMAKE* = 80
  wxSTC_LEX_GAP* = 81
  wxSTC_LEX_PLM* = 82
  wxSTC_LEX_PROGRESS* = 83
  wxSTC_LEX_ABAQUS* = 84
  wxSTC_LEX_ASYMPTOTE* = 85
  wxSTC_LEX_R* = 86
  wxSTC_LEX_MAGIK* = 87
  wxSTC_LEX_POWERSHELL* = 88
  wxSTC_LEX_MYSQL* = 89
  wxSTC_LEX_PO* = 90
  wxSTC_LEX_TAL* = 91
  wxSTC_LEX_COBOL* = 92
  wxSTC_LEX_TACL* = 93
  wxSTC_LEX_SORCUS* = 94
  wxSTC_LEX_POWERPRO* = 95
  wxSTC_LEX_NIMROD* = 96
  wxSTC_LEX_SML* = 97
  wxSTC_LEX_MARKDOWN* = 98
  wxSTC_LEX_TXT2TAGS* = 99
  wxSTC_LEX_A68K* = 100
  wxSTC_LEX_MODULA* = 101
  wxSTC_LEX_COFFEESCRIPT* = 102
  wxSTC_LEX_TCMD* = 103
  wxSTC_LEX_AVS* = 104
  wxSTC_LEX_ECL* = 105
  wxSTC_LEX_OSCRIPT* = 106
  wxSTC_LEX_VISUALPROLOG* = 107


const 
  wxSTC_LEX_AUTOMATIC* = 1000


const 
  wxSTC_P_DEFAULT* = 0
  wxSTC_P_COMMENTLINE* = 1
  wxSTC_P_NUMBER* = 2
  wxSTC_P_STRING* = 3
  wxSTC_P_CHARACTER* = 4
  wxSTC_P_WORD* = 5
  wxSTC_P_TRIPLE* = 6
  wxSTC_P_TRIPLEDOUBLE* = 7
  wxSTC_P_CLASSNAME* = 8
  wxSTC_P_DEFNAME* = 9
  wxSTC_P_OPERATOR* = 10
  wxSTC_P_IDENTIFIER* = 11
  wxSTC_P_COMMENTBLOCK* = 12
  wxSTC_P_STRINGEOL* = 13
  wxSTC_P_WORD2* = 14
  wxSTC_P_DECORATOR* = 15


const 
  wxSTC_C_DEFAULT* = 0
  wxSTC_C_COMMENT* = 1
  wxSTC_C_COMMENTLINE* = 2
  wxSTC_C_COMMENTDOC* = 3
  wxSTC_C_NUMBER* = 4
  wxSTC_C_WORD* = 5
  wxSTC_C_STRING* = 6
  wxSTC_C_CHARACTER* = 7
  wxSTC_C_UUID* = 8
  wxSTC_C_PREPROCESSOR* = 9
  wxSTC_C_OPERATOR* = 10
  wxSTC_C_IDENTIFIER* = 11
  wxSTC_C_STRINGEOL* = 12
  wxSTC_C_VERBATIM* = 13
  wxSTC_C_REGEX* = 14
  wxSTC_C_COMMENTLINEDOC* = 15
  wxSTC_C_WORD2* = 16
  wxSTC_C_COMMENTDOCKEYWORD* = 17
  wxSTC_C_COMMENTDOCKEYWORDERROR* = 18
  wxSTC_C_GLOBALCLASS* = 19
  wxSTC_C_STRINGRAW* = 20
  wxSTC_C_TRIPLEVERBATIM* = 21
  wxSTC_C_HASHQUOTEDSTRING* = 22
  wxSTC_C_PREPROCESSORCOMMENT* = 23


const 
  wxSTC_D_DEFAULT* = 0
  wxSTC_D_COMMENT* = 1
  wxSTC_D_COMMENTLINE* = 2
  wxSTC_D_COMMENTDOC* = 3
  wxSTC_D_COMMENTNESTED* = 4
  wxSTC_D_NUMBER* = 5
  wxSTC_D_WORD* = 6
  wxSTC_D_WORD2* = 7
  wxSTC_D_WORD3* = 8
  wxSTC_D_TYPEDEF* = 9
  wxSTC_D_STRING* = 10
  wxSTC_D_STRINGEOL* = 11
  wxSTC_D_CHARACTER* = 12
  wxSTC_D_OPERATOR* = 13
  wxSTC_D_IDENTIFIER* = 14
  wxSTC_D_COMMENTLINEDOC* = 15
  wxSTC_D_COMMENTDOCKEYWORD* = 16
  wxSTC_D_COMMENTDOCKEYWORDERROR* = 17
  wxSTC_D_STRINGB* = 18
  wxSTC_D_STRINGR* = 19
  wxSTC_D_WORD5* = 20
  wxSTC_D_WORD6* = 21
  wxSTC_D_WORD7* = 22


const 
  wxSTC_TCL_DEFAULT* = 0
  wxSTC_TCL_COMMENT* = 1
  wxSTC_TCL_COMMENTLINE* = 2
  wxSTC_TCL_NUMBER* = 3
  wxSTC_TCL_WORD_IN_QUOTE* = 4
  wxSTC_TCL_IN_QUOTE* = 5
  wxSTC_TCL_OPERATOR* = 6
  wxSTC_TCL_IDENTIFIER* = 7
  wxSTC_TCL_SUBSTITUTION* = 8
  wxSTC_TCL_SUB_BRACE* = 9
  wxSTC_TCL_MODIFIER* = 10
  wxSTC_TCL_EXPAND* = 11
  wxSTC_TCL_WORD* = 12
  wxSTC_TCL_WORD2* = 13
  wxSTC_TCL_WORD3* = 14
  wxSTC_TCL_WORD4* = 15
  wxSTC_TCL_WORD5* = 16
  wxSTC_TCL_WORD6* = 17
  wxSTC_TCL_WORD7* = 18
  wxSTC_TCL_WORD8* = 19
  wxSTC_TCL_COMMENT_BOX* = 20
  wxSTC_TCL_BLOCK_COMMENT* = 21


const 
  wxSTC_H_DEFAULT* = 0
  wxSTC_H_TAG* = 1
  wxSTC_H_TAGUNKNOWN* = 2
  wxSTC_H_ATTRIBUTE* = 3
  wxSTC_H_ATTRIBUTEUNKNOWN* = 4
  wxSTC_H_NUMBER* = 5
  wxSTC_H_DOUBLESTRING* = 6
  wxSTC_H_SINGLESTRING* = 7
  wxSTC_H_OTHER* = 8
  wxSTC_H_COMMENT* = 9
  wxSTC_H_ENTITY* = 10


const 
  wxSTC_H_TAGEND* = 11
  wxSTC_H_XMLSTART* = 12
  wxSTC_H_XMLEND* = 13
  wxSTC_H_SCRIPT* = 14
  wxSTC_H_ASP* = 15
  wxSTC_H_ASPAT* = 16
  wxSTC_H_CDATA* = 17
  wxSTC_H_QUESTION* = 18


const 
  wxSTC_H_VALUE* = 19


const 
  wxSTC_H_XCCOMMENT* = 20


const 
  wxSTC_H_SGML_DEFAULT* = 21
  wxSTC_H_SGML_COMMAND* = 22
  wxSTC_H_SGML_1ST_PARAM* = 23
  wxSTC_H_SGML_DOUBLESTRING* = 24
  wxSTC_H_SGML_SIMPLESTRING* = 25
  wxSTC_H_SGML_ERROR* = 26
  wxSTC_H_SGML_SPECIAL* = 27
  wxSTC_H_SGML_ENTITY* = 28
  wxSTC_H_SGML_COMMENT* = 29
  wxSTC_H_SGML_1ST_PARAM_COMMENT* = 30
  wxSTC_H_SGML_BLOCK_DEFAULT* = 31


const 
  wxSTC_HJ_START* = 40
  wxSTC_HJ_DEFAULT* = 41
  wxSTC_HJ_COMMENT* = 42
  wxSTC_HJ_COMMENTLINE* = 43
  wxSTC_HJ_COMMENTDOC* = 44
  wxSTC_HJ_NUMBER* = 45
  wxSTC_HJ_WORD* = 46
  wxSTC_HJ_KEYWORD* = 47
  wxSTC_HJ_DOUBLESTRING* = 48
  wxSTC_HJ_SINGLESTRING* = 49
  wxSTC_HJ_SYMBOLS* = 50
  wxSTC_HJ_STRINGEOL* = 51
  wxSTC_HJ_REGEX* = 52


const 
  wxSTC_HJA_START* = 55
  wxSTC_HJA_DEFAULT* = 56
  wxSTC_HJA_COMMENT* = 57
  wxSTC_HJA_COMMENTLINE* = 58
  wxSTC_HJA_COMMENTDOC* = 59
  wxSTC_HJA_NUMBER* = 60
  wxSTC_HJA_WORD* = 61
  wxSTC_HJA_KEYWORD* = 62
  wxSTC_HJA_DOUBLESTRING* = 63
  wxSTC_HJA_SINGLESTRING* = 64
  wxSTC_HJA_SYMBOLS* = 65
  wxSTC_HJA_STRINGEOL* = 66
  wxSTC_HJA_REGEX* = 67


const 
  wxSTC_HB_START* = 70
  wxSTC_HB_DEFAULT* = 71
  wxSTC_HB_COMMENTLINE* = 72
  wxSTC_HB_NUMBER* = 73
  wxSTC_HB_WORD* = 74
  wxSTC_HB_STRING* = 75
  wxSTC_HB_IDENTIFIER* = 76
  wxSTC_HB_STRINGEOL* = 77


const 
  wxSTC_HBA_START* = 80
  wxSTC_HBA_DEFAULT* = 81
  wxSTC_HBA_COMMENTLINE* = 82
  wxSTC_HBA_NUMBER* = 83
  wxSTC_HBA_WORD* = 84
  wxSTC_HBA_STRING* = 85
  wxSTC_HBA_IDENTIFIER* = 86
  wxSTC_HBA_STRINGEOL* = 87


const 
  wxSTC_HP_START* = 90
  wxSTC_HP_DEFAULT* = 91
  wxSTC_HP_COMMENTLINE* = 92
  wxSTC_HP_NUMBER* = 93
  wxSTC_HP_STRING* = 94
  wxSTC_HP_CHARACTER* = 95
  wxSTC_HP_WORD* = 96
  wxSTC_HP_TRIPLE* = 97
  wxSTC_HP_TRIPLEDOUBLE* = 98
  wxSTC_HP_CLASSNAME* = 99
  wxSTC_HP_DEFNAME* = 100
  wxSTC_HP_OPERATOR* = 101
  wxSTC_HP_IDENTIFIER* = 102


const 
  wxSTC_HPHP_COMPLEX_VARIABLE* = 104


const 
  wxSTC_HPA_START* = 105
  wxSTC_HPA_DEFAULT* = 106
  wxSTC_HPA_COMMENTLINE* = 107
  wxSTC_HPA_NUMBER* = 108
  wxSTC_HPA_STRING* = 109
  wxSTC_HPA_CHARACTER* = 110
  wxSTC_HPA_WORD* = 111
  wxSTC_HPA_TRIPLE* = 112
  wxSTC_HPA_TRIPLEDOUBLE* = 113
  wxSTC_HPA_CLASSNAME* = 114
  wxSTC_HPA_DEFNAME* = 115
  wxSTC_HPA_OPERATOR* = 116
  wxSTC_HPA_IDENTIFIER* = 117


const 
  wxSTC_HPHP_DEFAULT* = 118
  wxSTC_HPHP_HSTRING* = 119
  wxSTC_HPHP_SIMPLESTRING* = 120
  wxSTC_HPHP_WORD* = 121
  wxSTC_HPHP_NUMBER* = 122
  wxSTC_HPHP_VARIABLE* = 123
  wxSTC_HPHP_COMMENT* = 124
  wxSTC_HPHP_COMMENTLINE* = 125
  wxSTC_HPHP_HSTRING_VARIABLE* = 126
  wxSTC_HPHP_OPERATOR* = 127


const 
  wxSTC_PL_DEFAULT* = 0
  wxSTC_PL_ERROR* = 1
  wxSTC_PL_COMMENTLINE* = 2
  wxSTC_PL_POD* = 3
  wxSTC_PL_NUMBER* = 4
  wxSTC_PL_WORD* = 5
  wxSTC_PL_STRING* = 6
  wxSTC_PL_CHARACTER* = 7
  wxSTC_PL_PUNCTUATION* = 8
  wxSTC_PL_PREPROCESSOR* = 9
  wxSTC_PL_OPERATOR* = 10
  wxSTC_PL_IDENTIFIER* = 11
  wxSTC_PL_SCALAR* = 12
  wxSTC_PL_ARRAY* = 13
  wxSTC_PL_HASH* = 14
  wxSTC_PL_SYMBOLTABLE* = 15
  wxSTC_PL_VARIABLE_INDEXER* = 16
  wxSTC_PL_REGEX* = 17
  wxSTC_PL_REGSUBST* = 18
  wxSTC_PL_LONGQUOTE* = 19
  wxSTC_PL_BACKTICKS* = 20
  wxSTC_PL_DATASECTION* = 21
  wxSTC_PL_HERE_DELIM* = 22
  wxSTC_PL_HERE_Q* = 23
  wxSTC_PL_HERE_QQ* = 24
  wxSTC_PL_HERE_QX* = 25
  wxSTC_PL_STRING_Q* = 26
  wxSTC_PL_STRING_QQ* = 27
  wxSTC_PL_STRING_QX* = 28
  wxSTC_PL_STRING_QR* = 29
  wxSTC_PL_STRING_QW* = 30
  wxSTC_PL_POD_VERB* = 31
  wxSTC_PL_SUB_PROTOTYPE* = 40
  wxSTC_PL_FORMAT_IDENT* = 41
  wxSTC_PL_FORMAT* = 42
  wxSTC_PL_STRING_VAR* = 43
  wxSTC_PL_XLAT* = 44
  wxSTC_PL_REGEX_VAR* = 54
  wxSTC_PL_REGSUBST_VAR* = 55
  wxSTC_PL_BACKTICKS_VAR* = 57
  wxSTC_PL_HERE_QQ_VAR* = 61
  wxSTC_PL_HERE_QX_VAR* = 62
  wxSTC_PL_STRING_QQ_VAR* = 64
  wxSTC_PL_STRING_QX_VAR* = 65
  wxSTC_PL_STRING_QR_VAR* = 66


const 
  wxSTC_RB_DEFAULT* = 0
  wxSTC_RB_ERROR* = 1
  wxSTC_RB_COMMENTLINE* = 2
  wxSTC_RB_POD* = 3
  wxSTC_RB_NUMBER* = 4
  wxSTC_RB_WORD* = 5
  wxSTC_RB_STRING* = 6
  wxSTC_RB_CHARACTER* = 7
  wxSTC_RB_CLASSNAME* = 8
  wxSTC_RB_DEFNAME* = 9
  wxSTC_RB_OPERATOR* = 10
  wxSTC_RB_IDENTIFIER* = 11
  wxSTC_RB_REGEX* = 12
  wxSTC_RB_GLOBAL* = 13
  wxSTC_RB_SYMBOL* = 14
  wxSTC_RB_MODULE_NAME* = 15
  wxSTC_RB_INSTANCE_VAR* = 16
  wxSTC_RB_CLASS_VAR* = 17
  wxSTC_RB_BACKTICKS* = 18
  wxSTC_RB_DATASECTION* = 19
  wxSTC_RB_HERE_DELIM* = 20
  wxSTC_RB_HERE_Q* = 21
  wxSTC_RB_HERE_QQ* = 22
  wxSTC_RB_HERE_QX* = 23
  wxSTC_RB_STRING_Q* = 24
  wxSTC_RB_STRING_QQ* = 25
  wxSTC_RB_STRING_QX* = 26
  wxSTC_RB_STRING_QR* = 27
  wxSTC_RB_STRING_QW* = 28
  wxSTC_RB_WORD_DEMOTED* = 29
  wxSTC_RB_STDIN* = 30
  wxSTC_RB_STDOUT* = 31
  wxSTC_RB_STDERR* = 40
  wxSTC_RB_UPPER_BOUND* = 41


const 
  wxSTC_B_DEFAULT* = 0
  wxSTC_B_COMMENT* = 1
  wxSTC_B_NUMBER* = 2
  wxSTC_B_KEYWORD* = 3
  wxSTC_B_STRING* = 4
  wxSTC_B_PREPROCESSOR* = 5
  wxSTC_B_OPERATOR* = 6
  wxSTC_B_IDENTIFIER* = 7
  wxSTC_B_DATE* = 8
  wxSTC_B_STRINGEOL* = 9
  wxSTC_B_KEYWORD2* = 10
  wxSTC_B_KEYWORD3* = 11
  wxSTC_B_KEYWORD4* = 12
  wxSTC_B_CONSTANT* = 13
  wxSTC_B_ASM* = 14
  wxSTC_B_LABEL* = 15
  wxSTC_B_ERROR* = 16
  wxSTC_B_HEXNUMBER* = 17
  wxSTC_B_BINNUMBER* = 18


const 
  wxSTC_PROPS_DEFAULT* = 0
  wxSTC_PROPS_COMMENT* = 1
  wxSTC_PROPS_SECTION* = 2
  wxSTC_PROPS_ASSIGNMENT* = 3
  wxSTC_PROPS_DEFVAL* = 4
  wxSTC_PROPS_KEY* = 5


const 
  wxSTC_L_DEFAULT* = 0
  wxSTC_L_COMMAND* = 1
  wxSTC_L_TAG* = 2
  wxSTC_L_MATH* = 3
  wxSTC_L_COMMENT* = 4
  wxSTC_L_TAG2* = 5
  wxSTC_L_MATH2* = 6
  wxSTC_L_COMMENT2* = 7
  wxSTC_L_VERBATIM* = 8
  wxSTC_L_SHORTCMD* = 9
  wxSTC_L_SPECIAL* = 10
  wxSTC_L_CMDOPT* = 11
  wxSTC_L_ERROR* = 12


const 
  wxSTC_LUA_DEFAULT* = 0
  wxSTC_LUA_COMMENT* = 1
  wxSTC_LUA_COMMENTLINE* = 2
  wxSTC_LUA_COMMENTDOC* = 3
  wxSTC_LUA_NUMBER* = 4
  wxSTC_LUA_WORD* = 5
  wxSTC_LUA_STRING* = 6
  wxSTC_LUA_CHARACTER* = 7
  wxSTC_LUA_LITERALSTRING* = 8
  wxSTC_LUA_PREPROCESSOR* = 9
  wxSTC_LUA_OPERATOR* = 10
  wxSTC_LUA_IDENTIFIER* = 11
  wxSTC_LUA_STRINGEOL* = 12
  wxSTC_LUA_WORD2* = 13
  wxSTC_LUA_WORD3* = 14
  wxSTC_LUA_WORD4* = 15
  wxSTC_LUA_WORD5* = 16
  wxSTC_LUA_WORD6* = 17
  wxSTC_LUA_WORD7* = 18
  wxSTC_LUA_WORD8* = 19
  wxSTC_LUA_LABEL* = 20


const 
  wxSTC_ERR_DEFAULT* = 0
  wxSTC_ERR_PYTHON* = 1
  wxSTC_ERR_GCC* = 2
  wxSTC_ERR_MS* = 3
  wxSTC_ERR_CMD* = 4
  wxSTC_ERR_BORLAND* = 5
  wxSTC_ERR_PERL* = 6
  wxSTC_ERR_NET* = 7
  wxSTC_ERR_LUA* = 8
  wxSTC_ERR_CTAG* = 9
  wxSTC_ERR_DIFF_CHANGED* = 10
  wxSTC_ERR_DIFF_ADDITION* = 11
  wxSTC_ERR_DIFF_DELETION* = 12
  wxSTC_ERR_DIFF_MESSAGE* = 13
  wxSTC_ERR_PHP* = 14
  wxSTC_ERR_ELF* = 15
  wxSTC_ERR_IFC* = 16
  wxSTC_ERR_IFORT* = 17
  wxSTC_ERR_ABSF* = 18
  wxSTC_ERR_TIDY* = 19
  wxSTC_ERR_JAVA_STACK* = 20
  wxSTC_ERR_VALUE* = 21


const 
  wxSTC_BAT_DEFAULT* = 0
  wxSTC_BAT_COMMENT* = 1
  wxSTC_BAT_WORD* = 2
  wxSTC_BAT_LABEL* = 3
  wxSTC_BAT_HIDE* = 4
  wxSTC_BAT_COMMAND* = 5
  wxSTC_BAT_IDENTIFIER* = 6
  wxSTC_BAT_OPERATOR* = 7


const 
  wxSTC_TCMD_DEFAULT* = 0
  wxSTC_TCMD_COMMENT* = 1
  wxSTC_TCMD_WORD* = 2
  wxSTC_TCMD_LABEL* = 3
  wxSTC_TCMD_HIDE* = 4
  wxSTC_TCMD_COMMAND* = 5
  wxSTC_TCMD_IDENTIFIER* = 6
  wxSTC_TCMD_OPERATOR* = 7
  wxSTC_TCMD_ENVIRONMENT* = 8
  wxSTC_TCMD_EXPANSION* = 9
  wxSTC_TCMD_CLABEL* = 10


const 
  wxSTC_MAKE_DEFAULT* = 0
  wxSTC_MAKE_COMMENT* = 1
  wxSTC_MAKE_PREPROCESSOR* = 2
  wxSTC_MAKE_IDENTIFIER* = 3
  wxSTC_MAKE_OPERATOR* = 4
  wxSTC_MAKE_TARGET* = 5
  wxSTC_MAKE_IDEOL* = 9


const 
  wxSTC_DIFF_DEFAULT* = 0
  wxSTC_DIFF_COMMENT* = 1
  wxSTC_DIFF_COMMAND* = 2
  wxSTC_DIFF_HEADER* = 3
  wxSTC_DIFF_POSITION* = 4
  wxSTC_DIFF_DELETED* = 5
  wxSTC_DIFF_ADDED* = 6
  wxSTC_DIFF_CHANGED* = 7


const 
  wxSTC_CONF_DEFAULT* = 0
  wxSTC_CONF_COMMENT* = 1
  wxSTC_CONF_NUMBER* = 2
  wxSTC_CONF_IDENTIFIER* = 3
  wxSTC_CONF_EXTENSION* = 4
  wxSTC_CONF_PARAMETER* = 5
  wxSTC_CONF_STRING* = 6
  wxSTC_CONF_OPERATOR* = 7
  wxSTC_CONF_IP* = 8
  wxSTC_CONF_DIRECTIVE* = 9


const 
  wxSTC_AVE_DEFAULT* = 0
  wxSTC_AVE_COMMENT* = 1
  wxSTC_AVE_NUMBER* = 2
  wxSTC_AVE_WORD* = 3
  wxSTC_AVE_STRING* = 6
  wxSTC_AVE_ENUM* = 7
  wxSTC_AVE_STRINGEOL* = 8
  wxSTC_AVE_IDENTIFIER* = 9
  wxSTC_AVE_OPERATOR* = 10
  wxSTC_AVE_WORD1* = 11
  wxSTC_AVE_WORD2* = 12
  wxSTC_AVE_WORD3* = 13
  wxSTC_AVE_WORD4* = 14
  wxSTC_AVE_WORD5* = 15
  wxSTC_AVE_WORD6* = 16


const 
  wxSTC_ADA_DEFAULT* = 0
  wxSTC_ADA_WORD* = 1
  wxSTC_ADA_IDENTIFIER* = 2
  wxSTC_ADA_NUMBER* = 3
  wxSTC_ADA_DELIMITER* = 4
  wxSTC_ADA_CHARACTER* = 5
  wxSTC_ADA_CHARACTEREOL* = 6
  wxSTC_ADA_STRING* = 7
  wxSTC_ADA_STRINGEOL* = 8
  wxSTC_ADA_LABEL* = 9
  wxSTC_ADA_COMMENTLINE* = 10
  wxSTC_ADA_ILLEGAL* = 11


const 
  wxSTC_BAAN_DEFAULT* = 0
  wxSTC_BAAN_COMMENT* = 1
  wxSTC_BAAN_COMMENTDOC* = 2
  wxSTC_BAAN_NUMBER* = 3
  wxSTC_BAAN_WORD* = 4
  wxSTC_BAAN_STRING* = 5
  wxSTC_BAAN_PREPROCESSOR* = 6
  wxSTC_BAAN_OPERATOR* = 7
  wxSTC_BAAN_IDENTIFIER* = 8
  wxSTC_BAAN_STRINGEOL* = 9
  wxSTC_BAAN_WORD2* = 10


const 
  wxSTC_LISP_DEFAULT* = 0
  wxSTC_LISP_COMMENT* = 1
  wxSTC_LISP_NUMBER* = 2
  wxSTC_LISP_KEYWORD* = 3
  wxSTC_LISP_KEYWORD_KW* = 4
  wxSTC_LISP_SYMBOL* = 5
  wxSTC_LISP_STRING* = 6
  wxSTC_LISP_STRINGEOL* = 8
  wxSTC_LISP_IDENTIFIER* = 9
  wxSTC_LISP_OPERATOR* = 10
  wxSTC_LISP_SPECIAL* = 11
  wxSTC_LISP_MULTI_COMMENT* = 12


const 
  wxSTC_EIFFEL_DEFAULT* = 0
  wxSTC_EIFFEL_COMMENTLINE* = 1
  wxSTC_EIFFEL_NUMBER* = 2
  wxSTC_EIFFEL_WORD* = 3
  wxSTC_EIFFEL_STRING* = 4
  wxSTC_EIFFEL_CHARACTER* = 5
  wxSTC_EIFFEL_OPERATOR* = 6
  wxSTC_EIFFEL_IDENTIFIER* = 7
  wxSTC_EIFFEL_STRINGEOL* = 8


const 
  wxSTC_NNCRONTAB_DEFAULT* = 0
  wxSTC_NNCRONTAB_COMMENT* = 1
  wxSTC_NNCRONTAB_TASK* = 2
  wxSTC_NNCRONTAB_SECTION* = 3
  wxSTC_NNCRONTAB_KEYWORD* = 4
  wxSTC_NNCRONTAB_MODIFIER* = 5
  wxSTC_NNCRONTAB_ASTERISK* = 6
  wxSTC_NNCRONTAB_NUMBER* = 7
  wxSTC_NNCRONTAB_STRING* = 8
  wxSTC_NNCRONTAB_ENVIRONMENT* = 9
  wxSTC_NNCRONTAB_IDENTIFIER* = 10


const 
  wxSTC_FORTH_DEFAULT* = 0
  wxSTC_FORTH_COMMENT* = 1
  wxSTC_FORTH_COMMENT_ML* = 2
  wxSTC_FORTH_IDENTIFIER* = 3
  wxSTC_FORTH_CONTROL* = 4
  wxSTC_FORTH_KEYWORD* = 5
  wxSTC_FORTH_DEFWORD* = 6
  wxSTC_FORTH_PREWORD1* = 7
  wxSTC_FORTH_PREWORD2* = 8
  wxSTC_FORTH_NUMBER* = 9
  wxSTC_FORTH_STRING* = 10
  wxSTC_FORTH_LOCALE* = 11


const 
  wxSTC_MATLAB_DEFAULT* = 0
  wxSTC_MATLAB_COMMENT* = 1
  wxSTC_MATLAB_COMMAND* = 2
  wxSTC_MATLAB_NUMBER* = 3
  wxSTC_MATLAB_KEYWORD* = 4


const 
  wxSTC_MATLAB_STRING* = 5
  wxSTC_MATLAB_OPERATOR* = 6
  wxSTC_MATLAB_IDENTIFIER* = 7
  wxSTC_MATLAB_DOUBLEQUOTESTRING* = 8


const 
  wxSTC_SCRIPTOL_DEFAULT* = 0
  wxSTC_SCRIPTOL_WHITE* = 1
  wxSTC_SCRIPTOL_COMMENTLINE* = 2
  wxSTC_SCRIPTOL_PERSISTENT* = 3
  wxSTC_SCRIPTOL_CSTYLE* = 4
  wxSTC_SCRIPTOL_COMMENTBLOCK* = 5
  wxSTC_SCRIPTOL_NUMBER* = 6
  wxSTC_SCRIPTOL_STRING* = 7
  wxSTC_SCRIPTOL_CHARACTER* = 8
  wxSTC_SCRIPTOL_STRINGEOL* = 9
  wxSTC_SCRIPTOL_KEYWORD* = 10
  wxSTC_SCRIPTOL_OPERATOR* = 11
  wxSTC_SCRIPTOL_IDENTIFIER* = 12
  wxSTC_SCRIPTOL_TRIPLE* = 13
  wxSTC_SCRIPTOL_CLASSNAME* = 14
  wxSTC_SCRIPTOL_PREPROCESSOR* = 15


const 
  wxSTC_ASM_DEFAULT* = 0
  wxSTC_ASM_COMMENT* = 1
  wxSTC_ASM_NUMBER* = 2
  wxSTC_ASM_STRING* = 3
  wxSTC_ASM_OPERATOR* = 4
  wxSTC_ASM_IDENTIFIER* = 5
  wxSTC_ASM_CPUINSTRUCTION* = 6
  wxSTC_ASM_MATHINSTRUCTION* = 7
  wxSTC_ASM_REGISTER* = 8
  wxSTC_ASM_DIRECTIVE* = 9
  wxSTC_ASM_DIRECTIVEOPERAND* = 10
  wxSTC_ASM_COMMENTBLOCK* = 11
  wxSTC_ASM_CHARACTER* = 12
  wxSTC_ASM_STRINGEOL* = 13
  wxSTC_ASM_EXTINSTRUCTION* = 14
  wxSTC_ASM_COMMENTDIRECTIVE* = 15


const 
  wxSTC_F_DEFAULT* = 0
  wxSTC_F_COMMENT* = 1
  wxSTC_F_NUMBER* = 2
  wxSTC_F_STRING1* = 3
  wxSTC_F_STRING2* = 4
  wxSTC_F_STRINGEOL* = 5
  wxSTC_F_OPERATOR* = 6
  wxSTC_F_IDENTIFIER* = 7
  wxSTC_F_WORD* = 8
  wxSTC_F_WORD2* = 9
  wxSTC_F_WORD3* = 10
  wxSTC_F_PREPROCESSOR* = 11
  wxSTC_F_OPERATOR2* = 12
  wxSTC_F_LABEL* = 13
  wxSTC_F_CONTINUATION* = 14


const 
  wxSTC_CSS_DEFAULT* = 0
  wxSTC_CSS_TAG* = 1
  wxSTC_CSS_CLASS* = 2
  wxSTC_CSS_PSEUDOCLASS* = 3
  wxSTC_CSS_UNKNOWN_PSEUDOCLASS* = 4
  wxSTC_CSS_OPERATOR* = 5
  wxSTC_CSS_IDENTIFIER* = 6
  wxSTC_CSS_UNKNOWN_IDENTIFIER* = 7
  wxSTC_CSS_VALUE* = 8
  wxSTC_CSS_COMMENT* = 9
  wxSTC_CSS_ID* = 10
  wxSTC_CSS_IMPORTANT* = 11
  wxSTC_CSS_DIRECTIVE* = 12
  wxSTC_CSS_DOUBLESTRING* = 13
  wxSTC_CSS_SINGLESTRING* = 14
  wxSTC_CSS_IDENTIFIER2* = 15
  wxSTC_CSS_ATTRIBUTE* = 16
  wxSTC_CSS_IDENTIFIER3* = 17
  wxSTC_CSS_PSEUDOELEMENT* = 18
  wxSTC_CSS_EXTENDED_IDENTIFIER* = 19
  wxSTC_CSS_EXTENDED_PSEUDOCLASS* = 20
  wxSTC_CSS_EXTENDED_PSEUDOELEMENT* = 21
  wxSTC_CSS_MEDIA* = 22
  wxSTC_CSS_VARIABLE* = 23


const 
  wxSTC_POV_DEFAULT* = 0
  wxSTC_POV_COMMENT* = 1
  wxSTC_POV_COMMENTLINE* = 2
  wxSTC_POV_NUMBER* = 3
  wxSTC_POV_OPERATOR* = 4
  wxSTC_POV_IDENTIFIER* = 5
  wxSTC_POV_STRING* = 6
  wxSTC_POV_STRINGEOL* = 7
  wxSTC_POV_DIRECTIVE* = 8
  wxSTC_POV_BADDIRECTIVE* = 9
  wxSTC_POV_WORD2* = 10
  wxSTC_POV_WORD3* = 11
  wxSTC_POV_WORD4* = 12
  wxSTC_POV_WORD5* = 13
  wxSTC_POV_WORD6* = 14
  wxSTC_POV_WORD7* = 15
  wxSTC_POV_WORD8* = 16


const 
  wxSTC_LOUT_DEFAULT* = 0
  wxSTC_LOUT_COMMENT* = 1
  wxSTC_LOUT_NUMBER* = 2
  wxSTC_LOUT_WORD* = 3
  wxSTC_LOUT_WORD2* = 4
  wxSTC_LOUT_WORD3* = 5
  wxSTC_LOUT_WORD4* = 6
  wxSTC_LOUT_STRING* = 7
  wxSTC_LOUT_OPERATOR* = 8
  wxSTC_LOUT_IDENTIFIER* = 9
  wxSTC_LOUT_STRINGEOL* = 10


const 
  wxSTC_ESCRIPT_DEFAULT* = 0
  wxSTC_ESCRIPT_COMMENT* = 1
  wxSTC_ESCRIPT_COMMENTLINE* = 2
  wxSTC_ESCRIPT_COMMENTDOC* = 3
  wxSTC_ESCRIPT_NUMBER* = 4
  wxSTC_ESCRIPT_WORD* = 5
  wxSTC_ESCRIPT_STRING* = 6
  wxSTC_ESCRIPT_OPERATOR* = 7
  wxSTC_ESCRIPT_IDENTIFIER* = 8
  wxSTC_ESCRIPT_BRACE* = 9
  wxSTC_ESCRIPT_WORD2* = 10
  wxSTC_ESCRIPT_WORD3* = 11


const 
  wxSTC_PS_DEFAULT* = 0
  wxSTC_PS_COMMENT* = 1
  wxSTC_PS_DSC_COMMENT* = 2
  wxSTC_PS_DSC_VALUE* = 3
  wxSTC_PS_NUMBER* = 4
  wxSTC_PS_NAME* = 5
  wxSTC_PS_KEYWORD* = 6
  wxSTC_PS_LITERAL* = 7
  wxSTC_PS_IMMEVAL* = 8
  wxSTC_PS_PAREN_ARRAY* = 9
  wxSTC_PS_PAREN_DICT* = 10
  wxSTC_PS_PAREN_PROC* = 11
  wxSTC_PS_TEXT* = 12
  wxSTC_PS_HEXSTRING* = 13
  wxSTC_PS_BASE85STRING* = 14
  wxSTC_PS_BADSTRINGCHAR* = 15


const 
  wxSTC_NSIS_DEFAULT* = 0
  wxSTC_NSIS_COMMENT* = 1
  wxSTC_NSIS_STRINGDQ* = 2
  wxSTC_NSIS_STRINGLQ* = 3
  wxSTC_NSIS_STRINGRQ* = 4
  wxSTC_NSIS_FUNCTION* = 5
  wxSTC_NSIS_VARIABLE* = 6
  wxSTC_NSIS_LABEL* = 7
  wxSTC_NSIS_USERDEFINED* = 8
  wxSTC_NSIS_SECTIONDEF* = 9
  wxSTC_NSIS_SUBSECTIONDEF* = 10
  wxSTC_NSIS_IFDEFINEDEF* = 11
  wxSTC_NSIS_MACRODEF* = 12
  wxSTC_NSIS_STRINGVAR* = 13
  wxSTC_NSIS_NUMBER* = 14
  wxSTC_NSIS_SECTIONGROUP* = 15
  wxSTC_NSIS_PAGEEX* = 16
  wxSTC_NSIS_FUNCTIONDEF* = 17
  wxSTC_NSIS_COMMENTBOX* = 18


const 
  wxSTC_MMIXAL_LEADWS* = 0
  wxSTC_MMIXAL_COMMENT* = 1
  wxSTC_MMIXAL_LABEL* = 2
  wxSTC_MMIXAL_OPCODE* = 3
  wxSTC_MMIXAL_OPCODE_PRE* = 4
  wxSTC_MMIXAL_OPCODE_VALID* = 5
  wxSTC_MMIXAL_OPCODE_UNKNOWN* = 6
  wxSTC_MMIXAL_OPCODE_POST* = 7
  wxSTC_MMIXAL_OPERANDS* = 8
  wxSTC_MMIXAL_NUMBER* = 9
  wxSTC_MMIXAL_REF* = 10
  wxSTC_MMIXAL_CHAR* = 11
  wxSTC_MMIXAL_STRING* = 12
  wxSTC_MMIXAL_REGISTER* = 13
  wxSTC_MMIXAL_HEX* = 14
  wxSTC_MMIXAL_OPERATOR* = 15
  wxSTC_MMIXAL_SYMBOL* = 16
  wxSTC_MMIXAL_INCLUDE* = 17


const 
  wxSTC_CLW_DEFAULT* = 0
  wxSTC_CLW_LABEL* = 1
  wxSTC_CLW_COMMENT* = 2
  wxSTC_CLW_STRING* = 3
  wxSTC_CLW_USER_IDENTIFIER* = 4
  wxSTC_CLW_INTEGER_CONSTANT* = 5
  wxSTC_CLW_REAL_CONSTANT* = 6
  wxSTC_CLW_PICTURE_STRING* = 7
  wxSTC_CLW_KEYWORD* = 8
  wxSTC_CLW_COMPILER_DIRECTIVE* = 9
  wxSTC_CLW_RUNTIME_EXPRESSIONS* = 10
  wxSTC_CLW_BUILTIN_PROCEDURES_FUNCTION* = 11
  wxSTC_CLW_STRUCTURE_DATA_TYPE* = 12
  wxSTC_CLW_ATTRIBUTE* = 13
  wxSTC_CLW_STANDARD_EQUATE* = 14
  wxSTC_CLW_ERROR* = 15
  wxSTC_CLW_DEPRECATED* = 16


const 
  wxSTC_LOT_DEFAULT* = 0
  wxSTC_LOT_HEADER* = 1
  wxSTC_LOT_BREAK* = 2
  wxSTC_LOT_SET* = 3
  wxSTC_LOT_PASS* = 4
  wxSTC_LOT_FAIL* = 5
  wxSTC_LOT_ABORT* = 6


const 
  wxSTC_YAML_DEFAULT* = 0
  wxSTC_YAML_COMMENT* = 1
  wxSTC_YAML_IDENTIFIER* = 2
  wxSTC_YAML_KEYWORD* = 3
  wxSTC_YAML_NUMBER* = 4
  wxSTC_YAML_REFERENCE* = 5
  wxSTC_YAML_DOCUMENT* = 6
  wxSTC_YAML_TEXT* = 7
  wxSTC_YAML_ERROR* = 8
  wxSTC_YAML_OPERATOR* = 9


const 
  wxSTC_TEX_DEFAULT* = 0
  wxSTC_TEX_SPECIAL* = 1
  wxSTC_TEX_GROUP* = 2
  wxSTC_TEX_SYMBOL* = 3
  wxSTC_TEX_COMMAND* = 4
  wxSTC_TEX_TEXT* = 5
  wxSTC_METAPOST_DEFAULT* = 0
  wxSTC_METAPOST_SPECIAL* = 1
  wxSTC_METAPOST_GROUP* = 2
  wxSTC_METAPOST_SYMBOL* = 3
  wxSTC_METAPOST_COMMAND* = 4
  wxSTC_METAPOST_TEXT* = 5
  wxSTC_METAPOST_EXTRA* = 6


const 
  wxSTC_ERLANG_DEFAULT* = 0
  wxSTC_ERLANG_COMMENT* = 1
  wxSTC_ERLANG_VARIABLE* = 2
  wxSTC_ERLANG_NUMBER* = 3
  wxSTC_ERLANG_KEYWORD* = 4
  wxSTC_ERLANG_STRING* = 5
  wxSTC_ERLANG_OPERATOR* = 6
  wxSTC_ERLANG_ATOM* = 7
  wxSTC_ERLANG_FUNCTION_NAME* = 8
  wxSTC_ERLANG_CHARACTER* = 9
  wxSTC_ERLANG_MACRO* = 10
  wxSTC_ERLANG_RECORD* = 11
  wxSTC_ERLANG_PREPROC* = 12
  wxSTC_ERLANG_NODE_NAME* = 13
  wxSTC_ERLANG_COMMENT_FUNCTION* = 14
  wxSTC_ERLANG_COMMENT_MODULE* = 15
  wxSTC_ERLANG_COMMENT_DOC* = 16
  wxSTC_ERLANG_COMMENT_DOC_MACRO* = 17
  wxSTC_ERLANG_ATOM_QUOTED* = 18
  wxSTC_ERLANG_MACRO_QUOTED* = 19
  wxSTC_ERLANG_RECORD_QUOTED* = 20
  wxSTC_ERLANG_NODE_NAME_QUOTED* = 21
  wxSTC_ERLANG_BIFS* = 22
  wxSTC_ERLANG_MODULES* = 23
  wxSTC_ERLANG_MODULES_ATT* = 24
  wxSTC_ERLANG_UNKNOWN* = 31


const 
  wxSTC_MSSQL_DEFAULT* = 0
  wxSTC_MSSQL_COMMENT* = 1
  wxSTC_MSSQL_LINE_COMMENT* = 2
  wxSTC_MSSQL_NUMBER* = 3
  wxSTC_MSSQL_STRING* = 4
  wxSTC_MSSQL_OPERATOR* = 5
  wxSTC_MSSQL_IDENTIFIER* = 6
  wxSTC_MSSQL_VARIABLE* = 7
  wxSTC_MSSQL_COLUMN_NAME* = 8
  wxSTC_MSSQL_STATEMENT* = 9
  wxSTC_MSSQL_DATATYPE* = 10
  wxSTC_MSSQL_SYSTABLE* = 11
  wxSTC_MSSQL_GLOBAL_VARIABLE* = 12
  wxSTC_MSSQL_FUNCTION* = 13
  wxSTC_MSSQL_STORED_PROCEDURE* = 14
  wxSTC_MSSQL_DEFAULT_PREF_DATATYPE* = 15
  wxSTC_MSSQL_COLUMN_NAME_2* = 16


const 
  wxSTC_V_DEFAULT* = 0
  wxSTC_V_COMMENT* = 1
  wxSTC_V_COMMENTLINE* = 2
  wxSTC_V_COMMENTLINEBANG* = 3
  wxSTC_V_NUMBER* = 4
  wxSTC_V_WORD* = 5
  wxSTC_V_STRING* = 6
  wxSTC_V_WORD2* = 7
  wxSTC_V_WORD3* = 8
  wxSTC_V_PREPROCESSOR* = 9
  wxSTC_V_OPERATOR* = 10
  wxSTC_V_IDENTIFIER* = 11
  wxSTC_V_STRINGEOL* = 12
  wxSTC_V_USER* = 19


const 
  wxSTC_KIX_DEFAULT* = 0
  wxSTC_KIX_COMMENT* = 1
  wxSTC_KIX_STRING1* = 2
  wxSTC_KIX_STRING2* = 3
  wxSTC_KIX_NUMBER* = 4
  wxSTC_KIX_VAR* = 5
  wxSTC_KIX_MACRO* = 6
  wxSTC_KIX_KEYWORD* = 7
  wxSTC_KIX_FUNCTIONS* = 8
  wxSTC_KIX_OPERATOR* = 9
  wxSTC_KIX_IDENTIFIER* = 31


const 
  wxSTC_GC_DEFAULT* = 0
  wxSTC_GC_COMMENTLINE* = 1
  wxSTC_GC_COMMENTBLOCK* = 2
  wxSTC_GC_GLOBAL* = 3
  wxSTC_GC_EVENT* = 4
  wxSTC_GC_ATTRIBUTE* = 5
  wxSTC_GC_CONTROL* = 6
  wxSTC_GC_COMMAND* = 7
  wxSTC_GC_STRING* = 8
  wxSTC_GC_OPERATOR* = 9


const 
  wxSTC_SN_DEFAULT* = 0
  wxSTC_SN_CODE* = 1
  wxSTC_SN_COMMENTLINE* = 2
  wxSTC_SN_COMMENTLINEBANG* = 3
  wxSTC_SN_NUMBER* = 4
  wxSTC_SN_WORD* = 5
  wxSTC_SN_STRING* = 6
  wxSTC_SN_WORD2* = 7
  wxSTC_SN_WORD3* = 8
  wxSTC_SN_PREPROCESSOR* = 9
  wxSTC_SN_OPERATOR* = 10
  wxSTC_SN_IDENTIFIER* = 11
  wxSTC_SN_STRINGEOL* = 12
  wxSTC_SN_REGEXTAG* = 13
  wxSTC_SN_SIGNAL* = 14
  wxSTC_SN_USER* = 19


const 
  wxSTC_AU3DEFAULT* = 0
  wxSTC_AU3COMMENT* = 1
  wxSTC_AU3COMMENTBLOCK* = 2
  wxSTC_AU3NUMBER* = 3
  wxSTC_AU3FUNCTION* = 4
  wxSTC_AU3KEYWORD* = 5
  wxSTC_AU3MACRO* = 6
  wxSTC_AU3STRING* = 7
  wxSTC_AU3OPERATOR* = 8
  wxSTC_AU3VARIABLE* = 9
  wxSTC_AU3SENT* = 10
  wxSTC_AU3PREPROCESSOR* = 11
  wxSTC_AU3SPECIAL* = 12
  wxSTC_AU3EXPAND* = 13
  wxSTC_AU3COMOBJ* = 14
  wxSTC_AU3UDF* = 15


const 
  wxSTC_APDL_DEFAULT* = 0
  wxSTC_APDL_COMMENT* = 1
  wxSTC_APDL_COMMENTBLOCK* = 2
  wxSTC_APDL_NUMBER* = 3
  wxSTC_APDL_STRING* = 4
  wxSTC_APDL_OPERATOR* = 5
  wxSTC_APDL_WORD* = 6
  wxSTC_APDL_PROCESSOR* = 7
  wxSTC_APDL_COMMAND* = 8
  wxSTC_APDL_SLASHCOMMAND* = 9
  wxSTC_APDL_STARCOMMAND* = 10
  wxSTC_APDL_ARGUMENT* = 11
  wxSTC_APDL_FUNCTION* = 12


const 
  wxSTC_SH_DEFAULT* = 0
  wxSTC_SH_ERROR* = 1
  wxSTC_SH_COMMENTLINE* = 2
  wxSTC_SH_NUMBER* = 3
  wxSTC_SH_WORD* = 4
  wxSTC_SH_STRING* = 5
  wxSTC_SH_CHARACTER* = 6
  wxSTC_SH_OPERATOR* = 7
  wxSTC_SH_IDENTIFIER* = 8
  wxSTC_SH_SCALAR* = 9
  wxSTC_SH_PARAM* = 10
  wxSTC_SH_BACKTICKS* = 11
  wxSTC_SH_HERE_DELIM* = 12
  wxSTC_SH_HERE_Q* = 13


const 
  wxSTC_ASN1DEFAULT* = 0
  wxSTC_ASN1COMMENT* = 1
  wxSTC_ASN1IDENTIFIER* = 2
  wxSTC_ASN1STRING* = 3
  wxSTC_ASN1OID* = 4
  wxSTC_ASN1SCALAR* = 5
  wxSTC_ASN1KEYWORD* = 6
  wxSTC_ASN1ATTRIBUTE* = 7
  wxSTC_ASN1DESCRIPTOR* = 8
  wxSTC_ASN1TYPE* = 9
  wxSTC_ASN1OPERATOR* = 10


const 
  wxSTC_VHDL_DEFAULT* = 0
  wxSTC_VHDL_COMMENT* = 1
  wxSTC_VHDL_COMMENTLINEBANG* = 2
  wxSTC_VHDL_NUMBER* = 3
  wxSTC_VHDL_STRING* = 4
  wxSTC_VHDL_OPERATOR* = 5
  wxSTC_VHDL_IDENTIFIER* = 6
  wxSTC_VHDL_STRINGEOL* = 7
  wxSTC_VHDL_KEYWORD* = 8
  wxSTC_VHDL_STDOPERATOR* = 9
  wxSTC_VHDL_ATTRIBUTE* = 10
  wxSTC_VHDL_STDFUNCTION* = 11
  wxSTC_VHDL_STDPACKAGE* = 12
  wxSTC_VHDL_STDTYPE* = 13
  wxSTC_VHDL_USERWORD* = 14


const 
  wxSTC_CAML_DEFAULT* = 0
  wxSTC_CAML_IDENTIFIER* = 1
  wxSTC_CAML_TAGNAME* = 2
  wxSTC_CAML_KEYWORD* = 3
  wxSTC_CAML_KEYWORD2* = 4
  wxSTC_CAML_KEYWORD3* = 5
  wxSTC_CAML_LINENUM* = 6
  wxSTC_CAML_OPERATOR* = 7
  wxSTC_CAML_NUMBER* = 8
  wxSTC_CAML_CHAR* = 9
  wxSTC_CAML_WHITE* = 10
  wxSTC_CAML_STRING* = 11
  wxSTC_CAML_COMMENT* = 12
  wxSTC_CAML_COMMENT1* = 13
  wxSTC_CAML_COMMENT2* = 14
  wxSTC_CAML_COMMENT3* = 15


const 
  wxSTC_HA_DEFAULT* = 0
  wxSTC_HA_IDENTIFIER* = 1
  wxSTC_HA_KEYWORD* = 2
  wxSTC_HA_NUMBER* = 3
  wxSTC_HA_STRING* = 4
  wxSTC_HA_CHARACTER* = 5
  wxSTC_HA_CLASS* = 6
  wxSTC_HA_MODULE* = 7
  wxSTC_HA_CAPITAL* = 8
  wxSTC_HA_DATA* = 9
  wxSTC_HA_IMPORT* = 10
  wxSTC_HA_OPERATOR* = 11
  wxSTC_HA_INSTANCE* = 12
  wxSTC_HA_COMMENTLINE* = 13
  wxSTC_HA_COMMENTBLOCK* = 14
  wxSTC_HA_COMMENTBLOCK2* = 15
  wxSTC_HA_COMMENTBLOCK3* = 16


const 
  wxSTC_T3DEFAULT* = 0
  wxSTC_T3X_DEFAULT* = 1
  wxSTC_T3PREPROCESSOR* = 2
  wxSTC_T3BLOCK_COMMENT* = 3
  wxSTC_T3LINE_COMMENT* = 4
  wxSTC_T3OPERATOR* = 5
  wxSTC_T3KEYWORD* = 6
  wxSTC_T3NUMBER* = 7
  wxSTC_T3IDENTIFIER* = 8
  wxSTC_T3S_STRING* = 9
  wxSTC_T3D_STRING* = 10
  wxSTC_T3X_STRING* = 11
  wxSTC_T3LIB_DIRECTIVE* = 12
  wxSTC_T3MSG_PARAM* = 13
  wxSTC_T3HTML_TAG* = 14
  wxSTC_T3HTML_DEFAULT* = 15
  wxSTC_T3HTML_STRING* = 16
  wxSTC_T3USER1* = 17
  wxSTC_T3USER2* = 18
  wxSTC_T3USER3* = 19
  wxSTC_T3BRACE* = 20


const 
  wxSTC_REBOL_DEFAULT* = 0
  wxSTC_REBOL_COMMENTLINE* = 1
  wxSTC_REBOL_COMMENTBLOCK* = 2
  wxSTC_REBOL_PREFACE* = 3
  wxSTC_REBOL_OPERATOR* = 4
  wxSTC_REBOL_CHARACTER* = 5
  wxSTC_REBOL_QUOTEDSTRING* = 6
  wxSTC_REBOL_BRACEDSTRING* = 7
  wxSTC_REBOL_NUMBER* = 8
  wxSTC_REBOL_PAIR* = 9
  wxSTC_REBOL_TUPLE* = 10
  wxSTC_REBOL_BINARY* = 11
  wxSTC_REBOL_MONEY* = 12
  wxSTC_REBOL_ISSUE* = 13
  wxSTC_REBOL_TAG* = 14
  wxSTC_REBOL_FILE* = 15
  wxSTC_REBOL_EMAIL* = 16
  wxSTC_REBOL_URL* = 17
  wxSTC_REBOL_DATE* = 18
  wxSTC_REBOL_TIME* = 19
  wxSTC_REBOL_IDENTIFIER* = 20
  wxSTC_REBOL_WORD* = 21
  wxSTC_REBOL_WORD2* = 22
  wxSTC_REBOL_WORD3* = 23
  wxSTC_REBOL_WORD4* = 24
  wxSTC_REBOL_WORD5* = 25
  wxSTC_REBOL_WORD6* = 26
  wxSTC_REBOL_WORD7* = 27
  wxSTC_REBOL_WORD8* = 28


const 
  wxSTC_SQL_DEFAULT* = 0
  wxSTC_SQL_COMMENT* = 1
  wxSTC_SQL_COMMENTLINE* = 2
  wxSTC_SQL_COMMENTDOC* = 3
  wxSTC_SQL_NUMBER* = 4
  wxSTC_SQL_WORD* = 5
  wxSTC_SQL_STRING* = 6
  wxSTC_SQL_CHARACTER* = 7
  wxSTC_SQL_SQLPLUS* = 8
  wxSTC_SQL_SQLPLUS_PROMPT* = 9
  wxSTC_SQL_OPERATOR* = 10
  wxSTC_SQL_IDENTIFIER* = 11
  wxSTC_SQL_SQLPLUS_COMMENT* = 13
  wxSTC_SQL_COMMENTLINEDOC* = 15
  wxSTC_SQL_WORD2* = 16
  wxSTC_SQL_COMMENTDOCKEYWORD* = 17
  wxSTC_SQL_COMMENTDOCKEYWORDERROR* = 18
  wxSTC_SQL_USER1* = 19
  wxSTC_SQL_USER2* = 20
  wxSTC_SQL_USER3* = 21
  wxSTC_SQL_USER4* = 22
  wxSTC_SQL_QUOTEDIDENTIFIER* = 23


const 
  wxSTC_ST_DEFAULT* = 0
  wxSTC_ST_STRING* = 1
  wxSTC_ST_NUMBER* = 2
  wxSTC_ST_COMMENT* = 3
  wxSTC_ST_SYMBOL* = 4
  wxSTC_ST_BINARY* = 5
  wxSTC_ST_BOOL* = 6
  wxSTC_ST_SELF* = 7
  wxSTC_ST_SUPER* = 8
  wxSTC_ST_NIL* = 9
  wxSTC_ST_GLOBAL* = 10
  wxSTC_ST_RETURN* = 11
  wxSTC_ST_SPECIAL* = 12
  wxSTC_ST_KWSEND* = 13
  wxSTC_ST_ASSIGN* = 14
  wxSTC_ST_CHARACTER* = 15
  wxSTC_ST_SPEC_SEL* = 16


const 
  wxSTC_FS_DEFAULT* = 0
  wxSTC_FS_COMMENT* = 1
  wxSTC_FS_COMMENTLINE* = 2
  wxSTC_FS_COMMENTDOC* = 3
  wxSTC_FS_COMMENTLINEDOC* = 4
  wxSTC_FS_COMMENTDOCKEYWORD* = 5
  wxSTC_FS_COMMENTDOCKEYWORDERROR* = 6
  wxSTC_FS_KEYWORD* = 7
  wxSTC_FS_KEYWORD2* = 8
  wxSTC_FS_KEYWORD3* = 9
  wxSTC_FS_KEYWORD4* = 10
  wxSTC_FS_NUMBER* = 11
  wxSTC_FS_STRING* = 12
  wxSTC_FS_PREPROCESSOR* = 13
  wxSTC_FS_OPERATOR* = 14
  wxSTC_FS_IDENTIFIER* = 15
  wxSTC_FS_DATE* = 16
  wxSTC_FS_STRINGEOL* = 17
  wxSTC_FS_CONSTANT* = 18
  wxSTC_FS_WORDOPERATOR* = 19
  wxSTC_FS_DISABLEDCODE* = 20
  wxSTC_FS_DEFAULT_C* = 21
  wxSTC_FS_COMMENTDOC_C* = 22
  wxSTC_FS_COMMENTLINEDOC_C* = 23
  wxSTC_FS_KEYWORD_C* = 24
  wxSTC_FS_KEYWORD2C* = 25
  wxSTC_FS_NUMBER_C* = 26
  wxSTC_FS_STRING_C* = 27
  wxSTC_FS_PREPROCESSOR_C* = 28
  wxSTC_FS_OPERATOR_C* = 29
  wxSTC_FS_IDENTIFIER_C* = 30
  wxSTC_FS_STRINGEOL_C* = 31


const 
  wxSTC_CSOUND_DEFAULT* = 0
  wxSTC_CSOUND_COMMENT* = 1
  wxSTC_CSOUND_NUMBER* = 2
  wxSTC_CSOUND_OPERATOR* = 3
  wxSTC_CSOUND_INSTR* = 4
  wxSTC_CSOUND_IDENTIFIER* = 5
  wxSTC_CSOUND_OPCODE* = 6
  wxSTC_CSOUND_HEADERSTMT* = 7
  wxSTC_CSOUND_USERKEYWORD* = 8
  wxSTC_CSOUND_COMMENTBLOCK* = 9
  wxSTC_CSOUND_PARAM* = 10
  wxSTC_CSOUND_ARATE_VAR* = 11
  wxSTC_CSOUND_KRATE_VAR* = 12
  wxSTC_CSOUND_IRATE_VAR* = 13
  wxSTC_CSOUND_GLOBAL_VAR* = 14
  wxSTC_CSOUND_STRINGEOL* = 15


const 
  wxSTC_INNO_DEFAULT* = 0
  wxSTC_INNO_COMMENT* = 1
  wxSTC_INNO_KEYWORD* = 2
  wxSTC_INNO_PARAMETER* = 3
  wxSTC_INNO_SECTION* = 4
  wxSTC_INNO_PREPROC* = 5
  wxSTC_INNO_INLINE_EXPANSION* = 6
  wxSTC_INNO_COMMENT_PASCAL* = 7
  wxSTC_INNO_KEYWORD_PASCAL* = 8
  wxSTC_INNO_KEYWORD_USER* = 9
  wxSTC_INNO_STRING_DOUBLE* = 10
  wxSTC_INNO_STRING_SINGLE* = 11
  wxSTC_INNO_IDENTIFIER* = 12


const 
  wxSTC_OPAL_SPACE* = 0
  wxSTC_OPAL_COMMENT_BLOCK* = 1
  wxSTC_OPAL_COMMENT_LINE* = 2
  wxSTC_OPAL_INTEGER* = 3
  wxSTC_OPAL_KEYWORD* = 4
  wxSTC_OPAL_SORT* = 5
  wxSTC_OPAL_STRING* = 6
  wxSTC_OPAL_PAR* = 7
  wxSTC_OPAL_BOOL_CONST* = 8
  wxSTC_OPAL_DEFAULT* = 32


const 
  wxSTC_SPICE_DEFAULT* = 0
  wxSTC_SPICE_IDENTIFIER* = 1
  wxSTC_SPICE_KEYWORD* = 2
  wxSTC_SPICE_KEYWORD2* = 3
  wxSTC_SPICE_KEYWORD3* = 4
  wxSTC_SPICE_NUMBER* = 5
  wxSTC_SPICE_DELIMITER* = 6
  wxSTC_SPICE_VALUE* = 7
  wxSTC_SPICE_COMMENTLINE* = 8


const 
  wxSTC_CMAKE_DEFAULT* = 0
  wxSTC_CMAKE_COMMENT* = 1
  wxSTC_CMAKE_STRINGDQ* = 2
  wxSTC_CMAKE_STRINGLQ* = 3
  wxSTC_CMAKE_STRINGRQ* = 4
  wxSTC_CMAKE_COMMANDS* = 5
  wxSTC_CMAKE_PARAMETERS* = 6
  wxSTC_CMAKE_VARIABLE* = 7
  wxSTC_CMAKE_USERDEFINED* = 8
  wxSTC_CMAKE_WHILEDEF* = 9
  wxSTC_CMAKE_FOREACHDEF* = 10
  wxSTC_CMAKE_IFDEFINEDEF* = 11
  wxSTC_CMAKE_MACRODEF* = 12
  wxSTC_CMAKE_STRINGVAR* = 13
  wxSTC_CMAKE_NUMBER* = 14


const 
  wxSTC_GAP_DEFAULT* = 0
  wxSTC_GAP_IDENTIFIER* = 1
  wxSTC_GAP_KEYWORD* = 2
  wxSTC_GAP_KEYWORD2* = 3
  wxSTC_GAP_KEYWORD3* = 4
  wxSTC_GAP_KEYWORD4* = 5
  wxSTC_GAP_STRING* = 6
  wxSTC_GAP_CHAR* = 7
  wxSTC_GAP_OPERATOR* = 8
  wxSTC_GAP_COMMENT* = 9
  wxSTC_GAP_NUMBER* = 10
  wxSTC_GAP_STRINGEOL* = 11


const 
  wxSTC_PLM_DEFAULT* = 0
  wxSTC_PLM_COMMENT* = 1
  wxSTC_PLM_STRING* = 2
  wxSTC_PLM_NUMBER* = 3
  wxSTC_PLM_IDENTIFIER* = 4
  wxSTC_PLM_OPERATOR* = 5
  wxSTC_PLM_CONTROL* = 6
  wxSTC_PLM_KEYWORD* = 7


const 
  wxSTC_4GL_DEFAULT* = 0
  wxSTC_4GL_NUMBER* = 1
  wxSTC_4GL_WORD* = 2
  wxSTC_4GL_STRING* = 3
  wxSTC_4GL_CHARACTER* = 4
  wxSTC_4GL_PREPROCESSOR* = 5
  wxSTC_4GL_OPERATOR* = 6
  wxSTC_4GL_IDENTIFIER* = 7
  wxSTC_4GL_BLOCK* = 8
  wxSTC_4GL_END* = 9
  wxSTC_4GL_COMMENT1* = 10
  wxSTC_4GL_COMMENT2* = 11
  wxSTC_4GL_COMMENT3* = 12
  wxSTC_4GL_COMMENT4* = 13
  wxSTC_4GL_COMMENT5* = 14
  wxSTC_4GL_COMMENT6* = 15
  wxSTC_4GL_DEFAULT_b* = 16
  wxSTC_4GL_NUMBER_b* = 17
  wxSTC_4GL_WORD_b* = 18
  wxSTC_4GL_STRING_b* = 19
  wxSTC_4GL_CHARACTER_b* = 20
  wxSTC_4GL_PREPROCESSOR_b* = 21
  wxSTC_4GL_OPERATOR_b* = 22
  wxSTC_4GL_IDENTIFIER_b* = 23
  wxSTC_4GL_BLOCK_b* = 24
  wxSTC_4GL_END_b* = 25
  wxSTC_4GL_COMMENT1B* = 26
  wxSTC_4GL_COMMENT2B* = 27
  wxSTC_4GL_COMMENT3B* = 28
  wxSTC_4GL_COMMENT4B* = 29
  wxSTC_4GL_COMMENT5B* = 30
  wxSTC_4GL_COMMENT6B* = 31


const 
  wxSTC_ABAQUS_DEFAULT* = 0
  wxSTC_ABAQUS_COMMENT* = 1
  wxSTC_ABAQUS_COMMENTBLOCK* = 2
  wxSTC_ABAQUS_NUMBER* = 3
  wxSTC_ABAQUS_STRING* = 4
  wxSTC_ABAQUS_OPERATOR* = 5
  wxSTC_ABAQUS_WORD* = 6
  wxSTC_ABAQUS_PROCESSOR* = 7
  wxSTC_ABAQUS_COMMAND* = 8
  wxSTC_ABAQUS_SLASHCOMMAND* = 9
  wxSTC_ABAQUS_STARCOMMAND* = 10
  wxSTC_ABAQUS_ARGUMENT* = 11
  wxSTC_ABAQUS_FUNCTION* = 12


const 
  wxSTC_ASY_DEFAULT* = 0
  wxSTC_ASY_COMMENT* = 1
  wxSTC_ASY_COMMENTLINE* = 2
  wxSTC_ASY_NUMBER* = 3
  wxSTC_ASY_WORD* = 4
  wxSTC_ASY_STRING* = 5
  wxSTC_ASY_CHARACTER* = 6
  wxSTC_ASY_OPERATOR* = 7
  wxSTC_ASY_IDENTIFIER* = 8
  wxSTC_ASY_STRINGEOL* = 9
  wxSTC_ASY_COMMENTLINEDOC* = 10
  wxSTC_ASY_WORD2* = 11


const 
  wxSTC_R_DEFAULT* = 0
  wxSTC_R_COMMENT* = 1
  wxSTC_R_KWORD* = 2
  wxSTC_R_BASEKWORD* = 3
  wxSTC_R_OTHERKWORD* = 4
  wxSTC_R_NUMBER* = 5
  wxSTC_R_STRING* = 6
  wxSTC_R_STRING2* = 7
  wxSTC_R_OPERATOR* = 8
  wxSTC_R_IDENTIFIER* = 9
  wxSTC_R_INFIX* = 10
  wxSTC_R_INFIXEOL* = 11


const 
  wxSTC_MAGIK_DEFAULT* = 0
  wxSTC_MAGIK_COMMENT* = 1
  wxSTC_MAGIK_HYPER_COMMENT* = 16
  wxSTC_MAGIK_STRING* = 2
  wxSTC_MAGIK_CHARACTER* = 3
  wxSTC_MAGIK_NUMBER* = 4
  wxSTC_MAGIK_IDENTIFIER* = 5
  wxSTC_MAGIK_OPERATOR* = 6
  wxSTC_MAGIK_FLOW* = 7
  wxSTC_MAGIK_CONTAINER* = 8
  wxSTC_MAGIK_BRACKET_BLOCK* = 9
  wxSTC_MAGIK_BRACE_BLOCK* = 10
  wxSTC_MAGIK_SQBRACKET_BLOCK* = 11
  wxSTC_MAGIK_UNKNOWN_KEYWORD* = 12
  wxSTC_MAGIK_KEYWORD* = 13
  wxSTC_MAGIK_PRAGMA* = 14
  wxSTC_MAGIK_SYMBOL* = 15


const 
  wxSTC_POWERSHELL_DEFAULT* = 0
  wxSTC_POWERSHELL_COMMENT* = 1
  wxSTC_POWERSHELL_STRING* = 2
  wxSTC_POWERSHELL_CHARACTER* = 3
  wxSTC_POWERSHELL_NUMBER* = 4
  wxSTC_POWERSHELL_VARIABLE* = 5
  wxSTC_POWERSHELL_OPERATOR* = 6
  wxSTC_POWERSHELL_IDENTIFIER* = 7
  wxSTC_POWERSHELL_KEYWORD* = 8
  wxSTC_POWERSHELL_CMDLET* = 9
  wxSTC_POWERSHELL_ALIAS* = 10
  wxSTC_POWERSHELL_FUNCTION* = 11
  wxSTC_POWERSHELL_USER1* = 12
  wxSTC_POWERSHELL_COMMENTSTREAM* = 13


const 
  wxSTC_MYSQL_DEFAULT* = 0
  wxSTC_MYSQL_COMMENT* = 1
  wxSTC_MYSQL_COMMENTLINE* = 2
  wxSTC_MYSQL_VARIABLE* = 3
  wxSTC_MYSQL_SYSTEMVARIABLE* = 4
  wxSTC_MYSQL_KNOWNSYSTEMVARIABLE* = 5
  wxSTC_MYSQL_NUMBER* = 6
  wxSTC_MYSQL_MAJORKEYWORD* = 7
  wxSTC_MYSQL_KEYWORD* = 8
  wxSTC_MYSQL_DATABASEOBJECT* = 9
  wxSTC_MYSQL_PROCEDUREKEYWORD* = 10
  wxSTC_MYSQL_STRING* = 11
  wxSTC_MYSQL_SQSTRING* = 12
  wxSTC_MYSQL_DQSTRING* = 13
  wxSTC_MYSQL_OPERATOR* = 14
  wxSTC_MYSQL_FUNCTION* = 15
  wxSTC_MYSQL_IDENTIFIER* = 16
  wxSTC_MYSQL_QUOTEDIDENTIFIER* = 17
  wxSTC_MYSQL_USER1* = 18
  wxSTC_MYSQL_USER2* = 19
  wxSTC_MYSQL_USER3* = 20
  wxSTC_MYSQL_HIDDENCOMMAND* = 21


const 
  wxSTC_PO_DEFAULT* = 0
  wxSTC_PO_COMMENT* = 1
  wxSTC_PO_MSGID* = 2
  wxSTC_PO_MSGID_TEXT* = 3
  wxSTC_PO_MSGSTR* = 4
  wxSTC_PO_MSGSTR_TEXT* = 5
  wxSTC_PO_MSGCTXT* = 6
  wxSTC_PO_MSGCTXT_TEXT* = 7
  wxSTC_PO_FUZZY* = 8


const 
  wxSTC_PAS_DEFAULT* = 0
  wxSTC_PAS_IDENTIFIER* = 1
  wxSTC_PAS_COMMENT* = 2
  wxSTC_PAS_COMMENT2* = 3
  wxSTC_PAS_COMMENTLINE* = 4
  wxSTC_PAS_PREPROCESSOR* = 5
  wxSTC_PAS_PREPROCESSOR2* = 6
  wxSTC_PAS_NUMBER* = 7
  wxSTC_PAS_HEXNUMBER* = 8
  wxSTC_PAS_WORD* = 9
  wxSTC_PAS_STRING* = 10
  wxSTC_PAS_STRINGEOL* = 11
  wxSTC_PAS_CHARACTER* = 12
  wxSTC_PAS_OPERATOR* = 13
  wxSTC_PAS_ASM* = 14


const 
  wxSTC_SORCUS_DEFAULT* = 0
  wxSTC_SORCUS_COMMAND* = 1
  wxSTC_SORCUS_PARAMETER* = 2
  wxSTC_SORCUS_COMMENTLINE* = 3
  wxSTC_SORCUS_STRING* = 4
  wxSTC_SORCUS_STRINGEOL* = 5
  wxSTC_SORCUS_IDENTIFIER* = 6
  wxSTC_SORCUS_OPERATOR* = 7
  wxSTC_SORCUS_NUMBER* = 8
  wxSTC_SORCUS_CONSTANT* = 9


const 
  wxSTC_POWERPRO_DEFAULT* = 0
  wxSTC_POWERPRO_COMMENTBLOCK* = 1
  wxSTC_POWERPRO_COMMENTLINE* = 2
  wxSTC_POWERPRO_NUMBER* = 3
  wxSTC_POWERPRO_WORD* = 4
  wxSTC_POWERPRO_WORD2* = 5
  wxSTC_POWERPRO_WORD3* = 6
  wxSTC_POWERPRO_WORD4* = 7
  wxSTC_POWERPRO_DOUBLEQUOTEDSTRING* = 8
  wxSTC_POWERPRO_SINGLEQUOTEDSTRING* = 9
  wxSTC_POWERPRO_LINECONTINUE* = 10
  wxSTC_POWERPRO_OPERATOR* = 11
  wxSTC_POWERPRO_IDENTIFIER* = 12
  wxSTC_POWERPRO_STRINGEOL* = 13
  wxSTC_POWERPRO_VERBATIM* = 14
  wxSTC_POWERPRO_ALTQUOTE* = 15
  wxSTC_POWERPRO_FUNCTION* = 16


const 
  wxSTC_SML_DEFAULT* = 0
  wxSTC_SML_IDENTIFIER* = 1
  wxSTC_SML_TAGNAME* = 2
  wxSTC_SML_KEYWORD* = 3
  wxSTC_SML_KEYWORD2* = 4
  wxSTC_SML_KEYWORD3* = 5
  wxSTC_SML_LINENUM* = 6
  wxSTC_SML_OPERATOR* = 7
  wxSTC_SML_NUMBER* = 8
  wxSTC_SML_CHAR* = 9
  wxSTC_SML_STRING* = 11
  wxSTC_SML_COMMENT* = 12
  wxSTC_SML_COMMENT1* = 13
  wxSTC_SML_COMMENT2* = 14
  wxSTC_SML_COMMENT3* = 15


const 
  wxSTC_MARKDOWN_DEFAULT* = 0
  wxSTC_MARKDOWN_LINE_BEGIN* = 1
  wxSTC_MARKDOWN_STRONG1* = 2
  wxSTC_MARKDOWN_STRONG2* = 3
  wxSTC_MARKDOWN_EM1* = 4
  wxSTC_MARKDOWN_EM2* = 5
  wxSTC_MARKDOWN_HEADER1* = 6
  wxSTC_MARKDOWN_HEADER2* = 7
  wxSTC_MARKDOWN_HEADER3* = 8
  wxSTC_MARKDOWN_HEADER4* = 9
  wxSTC_MARKDOWN_HEADER5* = 10
  wxSTC_MARKDOWN_HEADER6* = 11
  wxSTC_MARKDOWN_PRECHAR* = 12
  wxSTC_MARKDOWN_ULIST_ITEM* = 13
  wxSTC_MARKDOWN_OLIST_ITEM* = 14
  wxSTC_MARKDOWN_BLOCKQUOTE* = 15
  wxSTC_MARKDOWN_STRIKEOUT* = 16
  wxSTC_MARKDOWN_HRULE* = 17
  wxSTC_MARKDOWN_LINK* = 18
  wxSTC_MARKDOWN_CODE* = 19
  wxSTC_MARKDOWN_CODE2* = 20
  wxSTC_MARKDOWN_CODEBK* = 21


const 
  wxSTC_TXT2TAGS_DEFAULT* = 0
  wxSTC_TXT2TAGS_LINE_BEGIN* = 1
  wxSTC_TXT2TAGS_STRONG1* = 2
  wxSTC_TXT2TAGS_STRONG2* = 3
  wxSTC_TXT2TAGS_EM1* = 4
  wxSTC_TXT2TAGS_EM2* = 5
  wxSTC_TXT2TAGS_HEADER1* = 6
  wxSTC_TXT2TAGS_HEADER2* = 7
  wxSTC_TXT2TAGS_HEADER3* = 8
  wxSTC_TXT2TAGS_HEADER4* = 9
  wxSTC_TXT2TAGS_HEADER5* = 10
  wxSTC_TXT2TAGS_HEADER6* = 11
  wxSTC_TXT2TAGS_PRECHAR* = 12
  wxSTC_TXT2TAGS_ULIST_ITEM* = 13
  wxSTC_TXT2TAGS_OLIST_ITEM* = 14
  wxSTC_TXT2TAGS_BLOCKQUOTE* = 15
  wxSTC_TXT2TAGS_STRIKEOUT* = 16
  wxSTC_TXT2TAGS_HRULE* = 17
  wxSTC_TXT2TAGS_LINK* = 18
  wxSTC_TXT2TAGS_CODE* = 19
  wxSTC_TXT2TAGS_CODE2* = 20
  wxSTC_TXT2TAGS_CODEBK* = 21
  wxSTC_TXT2TAGS_COMMENT* = 22
  wxSTC_TXT2TAGS_OPTION* = 23
  wxSTC_TXT2TAGS_PREPROC* = 24
  wxSTC_TXT2TAGS_POSTPROC* = 25


const 
  wxSTC_A68K_DEFAULT* = 0
  wxSTC_A68K_COMMENT* = 1
  wxSTC_A68K_NUMBER_DEC* = 2
  wxSTC_A68K_NUMBER_BIN* = 3
  wxSTC_A68K_NUMBER_HEX* = 4
  wxSTC_A68K_STRING1* = 5
  wxSTC_A68K_OPERATOR* = 6
  wxSTC_A68K_CPUINSTRUCTION* = 7
  wxSTC_A68K_EXTINSTRUCTION* = 8
  wxSTC_A68K_REGISTER* = 9
  wxSTC_A68K_DIRECTIVE* = 10
  wxSTC_A68K_MACRO_ARG* = 11
  wxSTC_A68K_LABEL* = 12
  wxSTC_A68K_STRING2* = 13
  wxSTC_A68K_IDENTIFIER* = 14
  wxSTC_A68K_MACRO_DECLARATION* = 15
  wxSTC_A68K_COMMENT_WORD* = 16
  wxSTC_A68K_COMMENT_SPECIAL* = 17
  wxSTC_A68K_COMMENT_DOXYGEN* = 18


const 
  wxSTC_MODULA_DEFAULT* = 0
  wxSTC_MODULA_COMMENT* = 1
  wxSTC_MODULA_DOXYCOMM* = 2
  wxSTC_MODULA_DOXYKEY* = 3
  wxSTC_MODULA_KEYWORD* = 4
  wxSTC_MODULA_RESERVED* = 5
  wxSTC_MODULA_NUMBER* = 6
  wxSTC_MODULA_BASENUM* = 7
  wxSTC_MODULA_FLOAT* = 8
  wxSTC_MODULA_STRING* = 9
  wxSTC_MODULA_STRSPEC* = 10
  wxSTC_MODULA_CHAR* = 11
  wxSTC_MODULA_CHARSPEC* = 12
  wxSTC_MODULA_PROC* = 13
  wxSTC_MODULA_PRAGMA* = 14
  wxSTC_MODULA_PRGKEY* = 15
  wxSTC_MODULA_OPERATOR* = 16
  wxSTC_MODULA_BADSTR* = 17


const 
  wxSTC_COFFEESCRIPT_DEFAULT* = 0
  wxSTC_COFFEESCRIPT_COMMENT* = 1
  wxSTC_COFFEESCRIPT_COMMENTLINE* = 2
  wxSTC_COFFEESCRIPT_COMMENTDOC* = 3
  wxSTC_COFFEESCRIPT_NUMBER* = 4
  wxSTC_COFFEESCRIPT_WORD* = 5
  wxSTC_COFFEESCRIPT_STRING* = 6
  wxSTC_COFFEESCRIPT_CHARACTER* = 7
  wxSTC_COFFEESCRIPT_UUID* = 8
  wxSTC_COFFEESCRIPT_PREPROCESSOR* = 9
  wxSTC_COFFEESCRIPT_OPERATOR* = 10
  wxSTC_COFFEESCRIPT_IDENTIFIER* = 11
  wxSTC_COFFEESCRIPT_STRINGEOL* = 12
  wxSTC_COFFEESCRIPT_VERBATIM* = 13
  wxSTC_COFFEESCRIPT_REGEX* = 14
  wxSTC_COFFEESCRIPT_COMMENTLINEDOC* = 15
  wxSTC_COFFEESCRIPT_WORD2* = 16
  wxSTC_COFFEESCRIPT_COMMENTDOCKEYWORD* = 17
  wxSTC_COFFEESCRIPT_COMMENTDOCKEYWORDERROR* = 18
  wxSTC_COFFEESCRIPT_GLOBALCLASS* = 19
  wxSTC_COFFEESCRIPT_STRINGRAW* = 20
  wxSTC_COFFEESCRIPT_TRIPLEVERBATIM* = 21
  wxSTC_COFFEESCRIPT_HASHQUOTEDSTRING* = 22
  wxSTC_COFFEESCRIPT_COMMENTBLOCK* = 22
  wxSTC_COFFEESCRIPT_VERBOSE_REGEX* = 23
  wxSTC_COFFEESCRIPT_VERBOSE_REGEX_COMMENT* = 24


const 
  wxSTC_AVS_DEFAULT* = 0
  wxSTC_AVS_COMMENTBLOCK* = 1
  wxSTC_AVS_COMMENTBLOCKN* = 2
  wxSTC_AVS_COMMENTLINE* = 3
  wxSTC_AVS_NUMBER* = 4
  wxSTC_AVS_OPERATOR* = 5
  wxSTC_AVS_IDENTIFIER* = 6
  wxSTC_AVS_STRING* = 7
  wxSTC_AVS_TRIPLESTRING* = 8
  wxSTC_AVS_KEYWORD* = 9
  wxSTC_AVS_FILTER* = 10
  wxSTC_AVS_PLUGIN* = 11
  wxSTC_AVS_FUNCTION* = 12
  wxSTC_AVS_CLIPPROP* = 13
  wxSTC_AVS_USERDFN* = 14


const 
  wxSTC_ECL_DEFAULT* = 0
  wxSTC_ECL_COMMENT* = 1
  wxSTC_ECL_COMMENTLINE* = 2
  wxSTC_ECL_NUMBER* = 3
  wxSTC_ECL_STRING* = 4
  wxSTC_ECL_WORD0* = 5
  wxSTC_ECL_OPERATOR* = 6
  wxSTC_ECL_CHARACTER* = 7
  wxSTC_ECL_UUID* = 8
  wxSTC_ECL_PREPROCESSOR* = 9
  wxSTC_ECL_UNKNOWN* = 10
  wxSTC_ECL_IDENTIFIER* = 11
  wxSTC_ECL_STRINGEOL* = 12
  wxSTC_ECL_VERBATIM* = 13
  wxSTC_ECL_REGEX* = 14
  wxSTC_ECL_COMMENTLINEDOC* = 15
  wxSTC_ECL_WORD1* = 16
  wxSTC_ECL_COMMENTDOCKEYWORD* = 17
  wxSTC_ECL_COMMENTDOCKEYWORDERROR* = 18
  wxSTC_ECL_WORD2* = 19
  wxSTC_ECL_WORD3* = 20
  wxSTC_ECL_WORD4* = 21
  wxSTC_ECL_WORD5* = 22
  wxSTC_ECL_COMMENTDOC* = 23
  wxSTC_ECL_ADDED* = 24
  wxSTC_ECL_DELETED* = 25
  wxSTC_ECL_CHANGED* = 26
  wxSTC_ECL_MOVED* = 27


const 
  wxSTC_OSCRIPT_DEFAULT* = 0
  wxSTC_OSCRIPT_LINE_COMMENT* = 1
  wxSTC_OSCRIPT_BLOCK_COMMENT* = 2
  wxSTC_OSCRIPT_DOC_COMMENT* = 3
  wxSTC_OSCRIPT_PREPROCESSOR* = 4
  wxSTC_OSCRIPT_NUMBER* = 5
  wxSTC_OSCRIPT_SINGLEQUOTE_STRING* = 6
  wxSTC_OSCRIPT_DOUBLEQUOTE_STRING* = 7
  wxSTC_OSCRIPT_CONSTANT* = 8
  wxSTC_OSCRIPT_IDENTIFIER* = 9
  wxSTC_OSCRIPT_GLOBAL* = 10
  wxSTC_OSCRIPT_KEYWORD* = 11
  wxSTC_OSCRIPT_OPERATOR* = 12
  wxSTC_OSCRIPT_LABEL* = 13
  wxSTC_OSCRIPT_TYPE* = 14
  wxSTC_OSCRIPT_FUNCTION* = 15
  wxSTC_OSCRIPT_OBJECT* = 16
  wxSTC_OSCRIPT_PROPERTY* = 17
  wxSTC_OSCRIPT_METHOD* = 18


const 
  wxSTC_VISUALPROLOG_DEFAULT* = 0
  wxSTC_VISUALPROLOG_KEY_MAJOR* = 1
  wxSTC_VISUALPROLOG_KEY_MINOR* = 2
  wxSTC_VISUALPROLOG_KEY_DIRECTIVE* = 3
  wxSTC_VISUALPROLOG_COMMENT_BLOCK* = 4
  wxSTC_VISUALPROLOG_COMMENT_LINE* = 5
  wxSTC_VISUALPROLOG_COMMENT_KEY* = 6
  wxSTC_VISUALPROLOG_COMMENT_KEY_ERROR* = 7
  wxSTC_VISUALPROLOG_IDENTIFIER* = 8
  wxSTC_VISUALPROLOG_VARIABLE* = 9
  wxSTC_VISUALPROLOG_ANONYMOUS* = 10
  wxSTC_VISUALPROLOG_NUMBER* = 11
  wxSTC_VISUALPROLOG_OPERATOR* = 12
  wxSTC_VISUALPROLOG_CHARACTER* = 13
  wxSTC_VISUALPROLOG_CHARACTER_TOO_MANY* = 14
  wxSTC_VISUALPROLOG_CHARACTER_ESCAPE_ERROR* = 15
  wxSTC_VISUALPROLOG_STRING* = 16
  wxSTC_VISUALPROLOG_STRING_ESCAPE* = 17
  wxSTC_VISUALPROLOG_STRING_ESCAPE_ERROR* = 18
  wxSTC_VISUALPROLOG_STRING_EOL_OPEN* = 19
  wxSTC_VISUALPROLOG_STRING_VERBATIM* = 20
  wxSTC_VISUALPROLOG_STRING_VERBATIM_SPECIAL* = 21
  wxSTC_VISUALPROLOG_STRING_VERBATIM_EOL* = 22


const 
  wxSTC_CMD_REDO* = 2011


const 
  wxSTC_CMD_SELECTALL* = 2013


const 
  wxSTC_CMD_UNDO* = 2176


const 
  wxSTC_CMD_CUT* = 2177


const 
  wxSTC_CMD_COPY* = 2178


const 
  wxSTC_CMD_PASTE* = 2179


const 
  wxSTC_CMD_CLEAR* = 2180


const 
  wxSTC_CMD_LINEDOWN* = 2300


const 
  wxSTC_CMD_LINEDOWNEXTEND* = 2301


const 
  wxSTC_CMD_LINEUP* = 2302


const 
  wxSTC_CMD_LINEUPEXTEND* = 2303


const 
  wxSTC_CMD_CHARLEFT* = 2304


const 
  wxSTC_CMD_CHARLEFTEXTEND* = 2305


const 
  wxSTC_CMD_CHARRIGHT* = 2306


const 
  wxSTC_CMD_CHARRIGHTEXTEND* = 2307


const 
  wxSTC_CMD_WORDLEFT* = 2308


const 
  wxSTC_CMD_WORDLEFTEXTEND* = 2309


const 
  wxSTC_CMD_WORDRIGHT* = 2310


const 
  wxSTC_CMD_WORDRIGHTEXTEND* = 2311


const 
  wxSTC_CMD_HOME* = 2312


const 
  wxSTC_CMD_HOMEEXTEND* = 2313


const 
  wxSTC_CMD_LINEEND* = 2314


const 
  wxSTC_CMD_LINEENDEXTEND* = 2315


const 
  wxSTC_CMD_DOCUMENTSTART* = 2316


const 
  wxSTC_CMD_DOCUMENTSTARTEXTEND* = 2317


const 
  wxSTC_CMD_DOCUMENTEND* = 2318


const 
  wxSTC_CMD_DOCUMENTENDEXTEND* = 2319


const 
  wxSTC_CMD_PAGEUP* = 2320


const 
  wxSTC_CMD_PAGEUPEXTEND* = 2321


const 
  wxSTC_CMD_PAGEDOWN* = 2322


const 
  wxSTC_CMD_PAGEDOWNEXTEND* = 2323


const 
  wxSTC_CMD_EDITTOGGLEOVERTYPE* = 2324


const 
  wxSTC_CMD_CANCEL* = 2325


const 
  wxSTC_CMD_DELETEBACK* = 2326


const 
  wxSTC_CMD_TAB* = 2327


const 
  wxSTC_CMD_BACKTAB* = 2328


const 
  wxSTC_CMD_NEWLINE* = 2329


const 
  wxSTC_CMD_FORMFEED* = 2330


const 
  wxSTC_CMD_VCHOME* = 2331


const 
  wxSTC_CMD_VCHOMEEXTEND* = 2332


const 
  wxSTC_CMD_ZOOMIN* = 2333


const 
  wxSTC_CMD_ZOOMOUT* = 2334


const 
  wxSTC_CMD_DELWORDLEFT* = 2335


const 
  wxSTC_CMD_DELWORDRIGHT* = 2336


const 
  wxSTC_CMD_DELWORDRIGHTEND* = 2518


const 
  wxSTC_CMD_LINECUT* = 2337


const 
  wxSTC_CMD_LINEDELETE* = 2338


const 
  wxSTC_CMD_LINETRANSPOSE* = 2339


const 
  wxSTC_CMD_LINEDUPLICATE* = 2404


const 
  wxSTC_CMD_LOWERCASE* = 2340


const 
  wxSTC_CMD_UPPERCASE* = 2341


const 
  wxSTC_CMD_LINESCROLLDOWN* = 2342


const 
  wxSTC_CMD_LINESCROLLUP* = 2343


const 
  wxSTC_CMD_DELETEBACKNOTLINE* = 2344


const 
  wxSTC_CMD_HOMEDISPLAY* = 2345


const 
  wxSTC_CMD_HOMEDISPLAYEXTEND* = 2346


const 
  wxSTC_CMD_LINEENDDISPLAY* = 2347


const 
  wxSTC_CMD_LINEENDDISPLAYEXTEND* = 2348


const 
  wxSTC_CMD_HOMEWRAP* = 2349
  wxSTC_CMD_HOMEWRAPEXTEND* = 2450
  wxSTC_CMD_LINEENDWRAP* = 2451
  wxSTC_CMD_LINEENDWRAPEXTEND* = 2452
  wxSTC_CMD_VCHOMEWRAP* = 2453
  wxSTC_CMD_VCHOMEWRAPEXTEND* = 2454


const 
  wxSTC_CMD_LINECOPY* = 2455


const 
  wxSTC_CMD_WORDPARTLEFT* = 2390


const 
  wxSTC_CMD_WORDPARTLEFTEXTEND* = 2391


const 
  wxSTC_CMD_WORDPARTRIGHT* = 2392


const 
  wxSTC_CMD_WORDPARTRIGHTEXTEND* = 2393


const 
  wxSTC_CMD_DELLINELEFT* = 2395


const 
  wxSTC_CMD_DELLINERIGHT* = 2396


const 
  wxSTC_CMD_PARADOWN* = 2413
  wxSTC_CMD_PARADOWNEXTEND* = 2414
  wxSTC_CMD_PARAUP* = 2415
  wxSTC_CMD_PARAUPEXTEND* = 2416


const 
  wxSTC_CMD_LINEDOWNRECTEXTEND* = 2426


const 
  wxSTC_CMD_LINEUPRECTEXTEND* = 2427


const 
  wxSTC_CMD_CHARLEFTRECTEXTEND* = 2428


const 
  wxSTC_CMD_CHARRIGHTRECTEXTEND* = 2429


const 
  wxSTC_CMD_HOMERECTEXTEND* = 2430


const 
  wxSTC_CMD_VCHOMERECTEXTEND* = 2431


const 
  wxSTC_CMD_LINEENDRECTEXTEND* = 2432


const 
  wxSTC_CMD_PAGEUPRECTEXTEND* = 2433


const 
  wxSTC_CMD_PAGEDOWNRECTEXTEND* = 2434


const 
  wxSTC_CMD_STUTTEREDPAGEUP* = 2435


const 
  wxSTC_CMD_STUTTEREDPAGEUPEXTEND* = 2436


const 
  wxSTC_CMD_STUTTEREDPAGEDOWN* = 2437


const 
  wxSTC_CMD_STUTTEREDPAGEDOWNEXTEND* = 2438


const 
  wxSTC_CMD_WORDLEFTEND* = 2439


const 
  wxSTC_CMD_WORDLEFTENDEXTEND* = 2440


const 
  wxSTC_CMD_WORDRIGHTEND* = 2441


const 
  wxSTC_CMD_WORDRIGHTENDEXTEND* = 2442


const 
  wxSTC_CMD_VERTICALCENTRECARET* = 2619


const 
  wxSTC_CMD_MOVESELECTEDLINESUP* = 2620


const 
  wxSTC_CMD_MOVESELECTEDLINESDOWN* = 2621


const 
  wxSTC_CMD_SCROLLTOSTART* = 2628


const 
  wxSTC_CMD_SCROLLTOEND* = 2629


discard "forward decl of ScintillaWX"
discard "forward decl of WordList"
discard "forward decl of SCNotification"
discard "forward decl of wxStyledTextCtrl"
discard "forward decl of wxStyledTextEvent"

type 
  WxStyledTextCtrl* {.importcpp: "wxStyledTextCtrl", header: "<wx/stc/stc.h>".} = object of WxControl
  

proc constructwxStyledTextCtrl*(parent: ptr WxWindow; id: WxWindowID = wxID_ANY; 
                                pos: WxPoint = wxDefaultPosition; 
                                size: WxSize = wxDefaultSize; style: clong = 0; 
                                name: WxString = "STC"): WxStyledTextCtrl {.
    cdecl, constructor, importcpp: "wxStyledTextCtrl(@)", 
    header: "<wx/stc/stc.h>".}
proc constructwxStyledTextCtrl*(): WxStyledTextCtrl {.cdecl, constructor, 
    importcpp: "wxStyledTextCtrl(@)", header: "<wx/stc/stc.h>".}
proc destroywxStyledTextCtrl*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "#.~wxStyledTextCtrl()", header: "<wx/stc/stc.h>".}
proc create*(this: var WxStyledTextCtrl; parent: ptr WxWindow; 
             id: WxWindowID = wxID_ANY; pos: WxPoint = wxDefaultPosition; 
             size: WxSize = wxDefaultSize; style: clong = 0; 
             name: WxString = "STC"): bool {.cdecl, importcpp: "Create", 
    header: "<wx/stc/stc.h>".}
proc addText*(this: var WxStyledTextCtrl; text: WxString) {.cdecl, 
    importcpp: "AddText", header: "<wx/stc/stc.h>".}
proc addStyledText*(this: var WxStyledTextCtrl; data: WxMemoryBuffer) {.cdecl, 
    importcpp: "AddStyledText", header: "<wx/stc/stc.h>".}
proc insertText*(this: var WxStyledTextCtrl; pos: cint; text: WxString) {.cdecl, 
    importcpp: "InsertText", header: "<wx/stc/stc.h>".}
proc clearAll*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "ClearAll", 
    header: "<wx/stc/stc.h>".}
proc deleteRange*(this: var WxStyledTextCtrl; pos: cint; deleteLength: cint) {.
    cdecl, importcpp: "DeleteRange", header: "<wx/stc/stc.h>".}
proc clearDocumentStyle*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "ClearDocumentStyle", header: "<wx/stc/stc.h>".}
proc getLength*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetLength", header: "<wx/stc/stc.h>".}
proc getCharAt*(this: WxStyledTextCtrl; pos: cint): cint {.noSideEffect, cdecl, 
    importcpp: "GetCharAt", header: "<wx/stc/stc.h>".}
proc getCurrentPos*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetCurrentPos", header: "<wx/stc/stc.h>".}
proc getAnchor*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetAnchor", header: "<wx/stc/stc.h>".}
proc getStyleAt*(this: WxStyledTextCtrl; pos: cint): cint {.noSideEffect, cdecl, 
    importcpp: "GetStyleAt", header: "<wx/stc/stc.h>".}
proc redo*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "Redo", 
    header: "<wx/stc/stc.h>".}
proc setUndoCollection*(this: var WxStyledTextCtrl; collectUndo: bool) {.cdecl, 
    importcpp: "SetUndoCollection", header: "<wx/stc/stc.h>".}
proc selectAll*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "SelectAll", 
    header: "<wx/stc/stc.h>".}
proc setSavePoint*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "SetSavePoint", header: "<wx/stc/stc.h>".}
proc getStyledText*(this: var WxStyledTextCtrl; startPos: cint; endPos: cint): WxMemoryBuffer {.
    cdecl, importcpp: "GetStyledText", header: "<wx/stc/stc.h>".}
proc canRedo*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "CanRedo", header: "<wx/stc/stc.h>".}
proc markerLineFromHandle*(this: var WxStyledTextCtrl; handle: cint): cint {.
    cdecl, importcpp: "MarkerLineFromHandle", header: "<wx/stc/stc.h>".}
proc markerDeleteHandle*(this: var WxStyledTextCtrl; handle: cint) {.cdecl, 
    importcpp: "MarkerDeleteHandle", header: "<wx/stc/stc.h>".}
proc getUndoCollection*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetUndoCollection", header: "<wx/stc/stc.h>".}
proc getViewWhiteSpace*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetViewWhiteSpace", header: "<wx/stc/stc.h>".}
proc setViewWhiteSpace*(this: var WxStyledTextCtrl; viewWS: cint) {.cdecl, 
    importcpp: "SetViewWhiteSpace", header: "<wx/stc/stc.h>".}
proc positionFromPoint*(this: WxStyledTextCtrl; pt: WxPoint): cint {.
    noSideEffect, cdecl, importcpp: "PositionFromPoint", 
    header: "<wx/stc/stc.h>".}
proc positionFromPointClose*(this: var WxStyledTextCtrl; x: cint; y: cint): cint {.
    cdecl, importcpp: "PositionFromPointClose", header: "<wx/stc/stc.h>".}
proc gotoLine*(this: var WxStyledTextCtrl; line: cint) {.cdecl, 
    importcpp: "GotoLine", header: "<wx/stc/stc.h>".}
proc gotoPos*(this: var WxStyledTextCtrl; pos: cint) {.cdecl, 
    importcpp: "GotoPos", header: "<wx/stc/stc.h>".}
proc setAnchor*(this: var WxStyledTextCtrl; posAnchor: cint) {.cdecl, 
    importcpp: "SetAnchor", header: "<wx/stc/stc.h>".}
proc getCurLine*(this: var WxStyledTextCtrl; linePos: ptr cint = nil): WxString {.
    cdecl, importcpp: "GetCurLine", header: "<wx/stc/stc.h>".}
proc getEndStyled*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetEndStyled", header: "<wx/stc/stc.h>".}
proc convertEOLs*(this: var WxStyledTextCtrl; eolMode: cint) {.cdecl, 
    importcpp: "ConvertEOLs", header: "<wx/stc/stc.h>".}
proc getEOLMode*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetEOLMode", header: "<wx/stc/stc.h>".}
proc setEOLMode*(this: var WxStyledTextCtrl; eolMode: cint) {.cdecl, 
    importcpp: "SetEOLMode", header: "<wx/stc/stc.h>".}
proc startStyling*(this: var WxStyledTextCtrl; pos: cint; mask: cint) {.cdecl, 
    importcpp: "StartStyling", header: "<wx/stc/stc.h>".}
proc setStyling*(this: var WxStyledTextCtrl; length: cint; style: cint) {.cdecl, 
    importcpp: "SetStyling", header: "<wx/stc/stc.h>".}
proc getBufferedDraw*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetBufferedDraw", header: "<wx/stc/stc.h>".}
proc setBufferedDraw*(this: var WxStyledTextCtrl; buffered: bool) {.cdecl, 
    importcpp: "SetBufferedDraw", header: "<wx/stc/stc.h>".}
proc setTabWidth*(this: var WxStyledTextCtrl; tabWidth: cint) {.cdecl, 
    importcpp: "SetTabWidth", header: "<wx/stc/stc.h>".}
proc getTabWidth*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetTabWidth", header: "<wx/stc/stc.h>".}
proc setCodePage*(this: var WxStyledTextCtrl; codePage: cint) {.cdecl, 
    importcpp: "SetCodePage", header: "<wx/stc/stc.h>".}
proc markerDefine*(this: var WxStyledTextCtrl; markerNumber: cint; 
                   markerSymbol: cint; foreground: WxColour = wxNullColour; 
                   background: WxColour = wxNullColour) {.cdecl, 
    importcpp: "MarkerDefine", header: "<wx/stc/stc.h>".}
proc markerSetForeground*(this: var WxStyledTextCtrl; markerNumber: cint; 
                          fore: WxColour) {.cdecl, 
    importcpp: "MarkerSetForeground", header: "<wx/stc/stc.h>".}
proc markerSetBackground*(this: var WxStyledTextCtrl; markerNumber: cint; 
                          back: WxColour) {.cdecl, 
    importcpp: "MarkerSetBackground", header: "<wx/stc/stc.h>".}
proc markerSetBackgroundSelected*(this: var WxStyledTextCtrl; 
                                  markerNumber: cint; back: WxColour) {.cdecl, 
    importcpp: "MarkerSetBackgroundSelected", header: "<wx/stc/stc.h>".}
proc markerEnableHighlight*(this: var WxStyledTextCtrl; enabled: bool) {.cdecl, 
    importcpp: "MarkerEnableHighlight", header: "<wx/stc/stc.h>".}
proc markerAdd*(this: var WxStyledTextCtrl; line: cint; markerNumber: cint): cint {.
    cdecl, importcpp: "MarkerAdd", header: "<wx/stc/stc.h>".}
proc markerDelete*(this: var WxStyledTextCtrl; line: cint; markerNumber: cint) {.
    cdecl, importcpp: "MarkerDelete", header: "<wx/stc/stc.h>".}
proc markerDeleteAll*(this: var WxStyledTextCtrl; markerNumber: cint) {.cdecl, 
    importcpp: "MarkerDeleteAll", header: "<wx/stc/stc.h>".}
proc markerGet*(this: var WxStyledTextCtrl; line: cint): cint {.cdecl, 
    importcpp: "MarkerGet", header: "<wx/stc/stc.h>".}
proc markerNext*(this: var WxStyledTextCtrl; lineStart: cint; markerMask: cint): cint {.
    cdecl, importcpp: "MarkerNext", header: "<wx/stc/stc.h>".}
proc markerPrevious*(this: var WxStyledTextCtrl; lineStart: cint; 
                     markerMask: cint): cint {.cdecl, 
    importcpp: "MarkerPrevious", header: "<wx/stc/stc.h>".}
proc markerDefineBitmap*(this: var WxStyledTextCtrl; markerNumber: cint; 
                         bmp: WxBitmap) {.cdecl, 
    importcpp: "MarkerDefineBitmap", header: "<wx/stc/stc.h>".}
proc markerAddSet*(this: var WxStyledTextCtrl; line: cint; set: cint) {.cdecl, 
    importcpp: "MarkerAddSet", header: "<wx/stc/stc.h>".}
proc markerSetAlpha*(this: var WxStyledTextCtrl; markerNumber: cint; alpha: cint) {.
    cdecl, importcpp: "MarkerSetAlpha", header: "<wx/stc/stc.h>".}
proc setMarginType*(this: var WxStyledTextCtrl; margin: cint; marginType: cint) {.
    cdecl, importcpp: "SetMarginType", header: "<wx/stc/stc.h>".}
proc getMarginType*(this: WxStyledTextCtrl; margin: cint): cint {.noSideEffect, 
    cdecl, importcpp: "GetMarginType", header: "<wx/stc/stc.h>".}
proc setMarginWidth*(this: var WxStyledTextCtrl; margin: cint; pixelWidth: cint) {.
    cdecl, importcpp: "SetMarginWidth", header: "<wx/stc/stc.h>".}
proc getMarginWidth*(this: WxStyledTextCtrl; margin: cint): cint {.noSideEffect, 
    cdecl, importcpp: "GetMarginWidth", header: "<wx/stc/stc.h>".}
proc setMarginMask*(this: var WxStyledTextCtrl; margin: cint; mask: cint) {.
    cdecl, importcpp: "SetMarginMask", header: "<wx/stc/stc.h>".}
proc getMarginMask*(this: WxStyledTextCtrl; margin: cint): cint {.noSideEffect, 
    cdecl, importcpp: "GetMarginMask", header: "<wx/stc/stc.h>".}
proc setMarginSensitive*(this: var WxStyledTextCtrl; margin: cint; 
                         sensitive: bool) {.cdecl, 
    importcpp: "SetMarginSensitive", header: "<wx/stc/stc.h>".}
proc getMarginSensitive*(this: WxStyledTextCtrl; margin: cint): bool {.
    noSideEffect, cdecl, importcpp: "GetMarginSensitive", 
    header: "<wx/stc/stc.h>".}
proc setMarginCursor*(this: var WxStyledTextCtrl; margin: cint; cursor: cint) {.
    cdecl, importcpp: "SetMarginCursor", header: "<wx/stc/stc.h>".}
proc getMarginCursor*(this: WxStyledTextCtrl; margin: cint): cint {.
    noSideEffect, cdecl, importcpp: "GetMarginCursor", header: "<wx/stc/stc.h>".}
proc styleClearAll*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "StyleClearAll", header: "<wx/stc/stc.h>".}
proc styleSetForeground*(this: var WxStyledTextCtrl; style: cint; fore: WxColour) {.
    cdecl, importcpp: "StyleSetForeground", header: "<wx/stc/stc.h>".}
proc styleSetBackground*(this: var WxStyledTextCtrl; style: cint; back: WxColour) {.
    cdecl, importcpp: "StyleSetBackground", header: "<wx/stc/stc.h>".}
proc styleSetBold*(this: var WxStyledTextCtrl; style: cint; bold: bool) {.cdecl, 
    importcpp: "StyleSetBold", header: "<wx/stc/stc.h>".}
proc styleSetItalic*(this: var WxStyledTextCtrl; style: cint; italic: bool) {.
    cdecl, importcpp: "StyleSetItalic", header: "<wx/stc/stc.h>".}
proc styleSetSize*(this: var WxStyledTextCtrl; style: cint; sizePoints: cint) {.
    cdecl, importcpp: "StyleSetSize", header: "<wx/stc/stc.h>".}
proc styleSetFaceName*(this: var WxStyledTextCtrl; style: cint; 
                       fontName: WxString) {.cdecl, 
    importcpp: "StyleSetFaceName", header: "<wx/stc/stc.h>".}
proc styleSetEOLFilled*(this: var WxStyledTextCtrl; style: cint; filled: bool) {.
    cdecl, importcpp: "StyleSetEOLFilled", header: "<wx/stc/stc.h>".}
proc styleResetDefault*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "StyleResetDefault", header: "<wx/stc/stc.h>".}
proc styleSetUnderline*(this: var WxStyledTextCtrl; style: cint; underline: bool) {.
    cdecl, importcpp: "StyleSetUnderline", header: "<wx/stc/stc.h>".}
proc styleGetForeground*(this: WxStyledTextCtrl; style: cint): WxColour {.
    noSideEffect, cdecl, importcpp: "StyleGetForeground", 
    header: "<wx/stc/stc.h>".}
proc styleGetBackground*(this: WxStyledTextCtrl; style: cint): WxColour {.
    noSideEffect, cdecl, importcpp: "StyleGetBackground", 
    header: "<wx/stc/stc.h>".}
proc styleGetBold*(this: WxStyledTextCtrl; style: cint): bool {.noSideEffect, 
    cdecl, importcpp: "StyleGetBold", header: "<wx/stc/stc.h>".}
proc styleGetItalic*(this: WxStyledTextCtrl; style: cint): bool {.noSideEffect, 
    cdecl, importcpp: "StyleGetItalic", header: "<wx/stc/stc.h>".}
proc styleGetSize*(this: WxStyledTextCtrl; style: cint): cint {.noSideEffect, 
    cdecl, importcpp: "StyleGetSize", header: "<wx/stc/stc.h>".}
proc styleGetFaceName*(this: var WxStyledTextCtrl; style: cint): WxString {.
    cdecl, importcpp: "StyleGetFaceName", header: "<wx/stc/stc.h>".}
proc styleGetEOLFilled*(this: WxStyledTextCtrl; style: cint): bool {.
    noSideEffect, cdecl, importcpp: "StyleGetEOLFilled", 
    header: "<wx/stc/stc.h>".}
proc styleGetUnderline*(this: WxStyledTextCtrl; style: cint): bool {.
    noSideEffect, cdecl, importcpp: "StyleGetUnderline", 
    header: "<wx/stc/stc.h>".}
proc styleGetCase*(this: WxStyledTextCtrl; style: cint): cint {.noSideEffect, 
    cdecl, importcpp: "StyleGetCase", header: "<wx/stc/stc.h>".}
proc styleGetCharacterSet*(this: WxStyledTextCtrl; style: cint): cint {.
    noSideEffect, cdecl, importcpp: "StyleGetCharacterSet", 
    header: "<wx/stc/stc.h>".}
proc styleGetVisible*(this: WxStyledTextCtrl; style: cint): bool {.noSideEffect, 
    cdecl, importcpp: "StyleGetVisible", header: "<wx/stc/stc.h>".}
proc styleGetChangeable*(this: WxStyledTextCtrl; style: cint): bool {.
    noSideEffect, cdecl, importcpp: "StyleGetChangeable", 
    header: "<wx/stc/stc.h>".}
proc styleGetHotSpot*(this: WxStyledTextCtrl; style: cint): bool {.noSideEffect, 
    cdecl, importcpp: "StyleGetHotSpot", header: "<wx/stc/stc.h>".}
proc styleSetCase*(this: var WxStyledTextCtrl; style: cint; caseForce: cint) {.
    cdecl, importcpp: "StyleSetCase", header: "<wx/stc/stc.h>".}
proc styleSetSizeFractional*(this: var WxStyledTextCtrl; style: cint; 
                             caseForce: cint) {.cdecl, 
    importcpp: "StyleSetSizeFractional", header: "<wx/stc/stc.h>".}
proc styleGetSizeFractional*(this: WxStyledTextCtrl; style: cint): cint {.
    noSideEffect, cdecl, importcpp: "StyleGetSizeFractional", 
    header: "<wx/stc/stc.h>".}
proc styleSetWeight*(this: var WxStyledTextCtrl; style: cint; weight: cint) {.
    cdecl, importcpp: "StyleSetWeight", header: "<wx/stc/stc.h>".}
proc styleGetWeight*(this: WxStyledTextCtrl; style: cint): cint {.noSideEffect, 
    cdecl, importcpp: "StyleGetWeight", header: "<wx/stc/stc.h>".}
proc styleSetHotSpot*(this: var WxStyledTextCtrl; style: cint; hotspot: bool) {.
    cdecl, importcpp: "StyleSetHotSpot", header: "<wx/stc/stc.h>".}
proc setSelForeground*(this: var WxStyledTextCtrl; useSetting: bool; 
                       fore: WxColour) {.cdecl, importcpp: "SetSelForeground", 
    header: "<wx/stc/stc.h>".}
proc setSelBackground*(this: var WxStyledTextCtrl; useSetting: bool; 
                       back: WxColour) {.cdecl, importcpp: "SetSelBackground", 
    header: "<wx/stc/stc.h>".}
proc getSelAlpha*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetSelAlpha", header: "<wx/stc/stc.h>".}
proc setSelAlpha*(this: var WxStyledTextCtrl; alpha: cint) {.cdecl, 
    importcpp: "SetSelAlpha", header: "<wx/stc/stc.h>".}
proc getSelEOLFilled*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetSelEOLFilled", header: "<wx/stc/stc.h>".}
proc setSelEOLFilled*(this: var WxStyledTextCtrl; filled: bool) {.cdecl, 
    importcpp: "SetSelEOLFilled", header: "<wx/stc/stc.h>".}
proc setCaretForeground*(this: var WxStyledTextCtrl; fore: WxColour) {.cdecl, 
    importcpp: "SetCaretForeground", header: "<wx/stc/stc.h>".}
proc cmdKeyAssign*(this: var WxStyledTextCtrl; key: cint; modifiers: cint; 
                   cmd: cint) {.cdecl, importcpp: "CmdKeyAssign", 
                                header: "<wx/stc/stc.h>".}
proc cmdKeyClear*(this: var WxStyledTextCtrl; key: cint; modifiers: cint) {.
    cdecl, importcpp: "CmdKeyClear", header: "<wx/stc/stc.h>".}
proc cmdKeyClearAll*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "CmdKeyClearAll", header: "<wx/stc/stc.h>".}
proc setStyleBytes*(this: var WxStyledTextCtrl; length: cint; 
                    styleBytes: cstring) {.cdecl, importcpp: "SetStyleBytes", 
    header: "<wx/stc/stc.h>".}
proc styleSetVisible*(this: var WxStyledTextCtrl; style: cint; visible: bool) {.
    cdecl, importcpp: "StyleSetVisible", header: "<wx/stc/stc.h>".}
proc getCaretPeriod*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetCaretPeriod", header: "<wx/stc/stc.h>".}
proc setCaretPeriod*(this: var WxStyledTextCtrl; periodMilliseconds: cint) {.
    cdecl, importcpp: "SetCaretPeriod", header: "<wx/stc/stc.h>".}
proc setWordChars*(this: var WxStyledTextCtrl; characters: WxString) {.cdecl, 
    importcpp: "SetWordChars", header: "<wx/stc/stc.h>".}
proc getWordChars*(this: WxStyledTextCtrl): WxString {.noSideEffect, cdecl, 
    importcpp: "GetWordChars", header: "<wx/stc/stc.h>".}
proc beginUndoAction*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "BeginUndoAction", header: "<wx/stc/stc.h>".}
proc endUndoAction*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "EndUndoAction", header: "<wx/stc/stc.h>".}
proc indicatorSetStyle*(this: var WxStyledTextCtrl; indic: cint; style: cint) {.
    cdecl, importcpp: "IndicatorSetStyle", header: "<wx/stc/stc.h>".}
proc indicatorGetStyle*(this: WxStyledTextCtrl; indic: cint): cint {.
    noSideEffect, cdecl, importcpp: "IndicatorGetStyle", 
    header: "<wx/stc/stc.h>".}
proc indicatorSetForeground*(this: var WxStyledTextCtrl; indic: cint; 
                             fore: WxColour) {.cdecl, 
    importcpp: "IndicatorSetForeground", header: "<wx/stc/stc.h>".}
proc indicatorGetForeground*(this: WxStyledTextCtrl; indic: cint): WxColour {.
    noSideEffect, cdecl, importcpp: "IndicatorGetForeground", 
    header: "<wx/stc/stc.h>".}
proc indicatorSetUnder*(this: var WxStyledTextCtrl; indic: cint; under: bool) {.
    cdecl, importcpp: "IndicatorSetUnder", header: "<wx/stc/stc.h>".}
proc indicatorGetUnder*(this: WxStyledTextCtrl; indic: cint): bool {.
    noSideEffect, cdecl, importcpp: "IndicatorGetUnder", 
    header: "<wx/stc/stc.h>".}
proc setWhitespaceForeground*(this: var WxStyledTextCtrl; useSetting: bool; 
                              fore: WxColour) {.cdecl, 
    importcpp: "SetWhitespaceForeground", header: "<wx/stc/stc.h>".}
proc setWhitespaceBackground*(this: var WxStyledTextCtrl; useSetting: bool; 
                              back: WxColour) {.cdecl, 
    importcpp: "SetWhitespaceBackground", header: "<wx/stc/stc.h>".}
proc setWhitespaceSize*(this: var WxStyledTextCtrl; size: cint) {.cdecl, 
    importcpp: "SetWhitespaceSize", header: "<wx/stc/stc.h>".}
proc getWhitespaceSize*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetWhitespaceSize", header: "<wx/stc/stc.h>".}
proc setStyleBits*(this: var WxStyledTextCtrl; bits: cint) {.cdecl, 
    importcpp: "SetStyleBits", header: "<wx/stc/stc.h>".}
proc getStyleBits*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetStyleBits", header: "<wx/stc/stc.h>".}
proc setLineState*(this: var WxStyledTextCtrl; line: cint; state: cint) {.cdecl, 
    importcpp: "SetLineState", header: "<wx/stc/stc.h>".}
proc getLineState*(this: WxStyledTextCtrl; line: cint): cint {.noSideEffect, 
    cdecl, importcpp: "GetLineState", header: "<wx/stc/stc.h>".}
proc getMaxLineState*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetMaxLineState", header: "<wx/stc/stc.h>".}
proc getCaretLineVisible*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetCaretLineVisible", header: "<wx/stc/stc.h>".}
proc setCaretLineVisible*(this: var WxStyledTextCtrl; show: bool) {.cdecl, 
    importcpp: "SetCaretLineVisible", header: "<wx/stc/stc.h>".}
proc getCaretLineBackground*(this: WxStyledTextCtrl): WxColour {.noSideEffect, 
    cdecl, importcpp: "GetCaretLineBackground", header: "<wx/stc/stc.h>".}
proc setCaretLineBackground*(this: var WxStyledTextCtrl; back: WxColour) {.
    cdecl, importcpp: "SetCaretLineBackground", header: "<wx/stc/stc.h>".}
proc styleSetChangeable*(this: var WxStyledTextCtrl; style: cint; 
                         changeable: bool) {.cdecl, 
    importcpp: "StyleSetChangeable", header: "<wx/stc/stc.h>".}
proc autoCompShow*(this: var WxStyledTextCtrl; lenEntered: cint; 
                   itemList: WxString) {.cdecl, importcpp: "AutoCompShow", 
    header: "<wx/stc/stc.h>".}
proc autoCompCancel*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "AutoCompCancel", header: "<wx/stc/stc.h>".}
proc autoCompActive*(this: var WxStyledTextCtrl): bool {.cdecl, 
    importcpp: "AutoCompActive", header: "<wx/stc/stc.h>".}
proc autoCompPosStart*(this: var WxStyledTextCtrl): cint {.cdecl, 
    importcpp: "AutoCompPosStart", header: "<wx/stc/stc.h>".}
proc autoCompComplete*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "AutoCompComplete", header: "<wx/stc/stc.h>".}
proc autoCompStops*(this: var WxStyledTextCtrl; characterSet: WxString) {.cdecl, 
    importcpp: "AutoCompStops", header: "<wx/stc/stc.h>".}
proc autoCompSetSeparator*(this: var WxStyledTextCtrl; separatorCharacter: cint) {.
    cdecl, importcpp: "AutoCompSetSeparator", header: "<wx/stc/stc.h>".}
proc autoCompGetSeparator*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "AutoCompGetSeparator", header: "<wx/stc/stc.h>".}
proc autoCompSelect*(this: var WxStyledTextCtrl; text: WxString) {.cdecl, 
    importcpp: "AutoCompSelect", header: "<wx/stc/stc.h>".}
proc autoCompSetCancelAtStart*(this: var WxStyledTextCtrl; cancel: bool) {.
    cdecl, importcpp: "AutoCompSetCancelAtStart", header: "<wx/stc/stc.h>".}
proc autoCompGetCancelAtStart*(this: WxStyledTextCtrl): bool {.noSideEffect, 
    cdecl, importcpp: "AutoCompGetCancelAtStart", header: "<wx/stc/stc.h>".}
proc autoCompSetFillUps*(this: var WxStyledTextCtrl; characterSet: WxString) {.
    cdecl, importcpp: "AutoCompSetFillUps", header: "<wx/stc/stc.h>".}
proc autoCompSetChooseSingle*(this: var WxStyledTextCtrl; chooseSingle: bool) {.
    cdecl, importcpp: "AutoCompSetChooseSingle", header: "<wx/stc/stc.h>".}
proc autoCompGetChooseSingle*(this: WxStyledTextCtrl): bool {.noSideEffect, 
    cdecl, importcpp: "AutoCompGetChooseSingle", header: "<wx/stc/stc.h>".}
proc autoCompSetIgnoreCase*(this: var WxStyledTextCtrl; ignoreCase: bool) {.
    cdecl, importcpp: "AutoCompSetIgnoreCase", header: "<wx/stc/stc.h>".}
proc autoCompGetIgnoreCase*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "AutoCompGetIgnoreCase", header: "<wx/stc/stc.h>".}
proc userListShow*(this: var WxStyledTextCtrl; listType: cint; 
                   itemList: WxString) {.cdecl, importcpp: "UserListShow", 
    header: "<wx/stc/stc.h>".}
proc autoCompSetAutoHide*(this: var WxStyledTextCtrl; autoHide: bool) {.cdecl, 
    importcpp: "AutoCompSetAutoHide", header: "<wx/stc/stc.h>".}
proc autoCompGetAutoHide*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "AutoCompGetAutoHide", header: "<wx/stc/stc.h>".}
proc autoCompSetDropRestOfWord*(this: var WxStyledTextCtrl; dropRestOfWord: bool) {.
    cdecl, importcpp: "AutoCompSetDropRestOfWord", header: "<wx/stc/stc.h>".}
proc autoCompGetDropRestOfWord*(this: WxStyledTextCtrl): bool {.noSideEffect, 
    cdecl, importcpp: "AutoCompGetDropRestOfWord", header: "<wx/stc/stc.h>".}
proc registerImage*(this: var WxStyledTextCtrl; `type`: cint; bmp: WxBitmap) {.
    cdecl, importcpp: "RegisterImage", header: "<wx/stc/stc.h>".}
proc clearRegisteredImages*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "ClearRegisteredImages", header: "<wx/stc/stc.h>".}
proc autoCompGetTypeSeparator*(this: WxStyledTextCtrl): cint {.noSideEffect, 
    cdecl, importcpp: "AutoCompGetTypeSeparator", header: "<wx/stc/stc.h>".}
proc autoCompSetTypeSeparator*(this: var WxStyledTextCtrl; 
                               separatorCharacter: cint) {.cdecl, 
    importcpp: "AutoCompSetTypeSeparator", header: "<wx/stc/stc.h>".}
proc autoCompSetMaxWidth*(this: var WxStyledTextCtrl; characterCount: cint) {.
    cdecl, importcpp: "AutoCompSetMaxWidth", header: "<wx/stc/stc.h>".}
proc autoCompGetMaxWidth*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "AutoCompGetMaxWidth", header: "<wx/stc/stc.h>".}
proc autoCompSetMaxHeight*(this: var WxStyledTextCtrl; rowCount: cint) {.cdecl, 
    importcpp: "AutoCompSetMaxHeight", header: "<wx/stc/stc.h>".}
proc autoCompGetMaxHeight*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "AutoCompGetMaxHeight", header: "<wx/stc/stc.h>".}
proc setIndent*(this: var WxStyledTextCtrl; indentSize: cint) {.cdecl, 
    importcpp: "SetIndent", header: "<wx/stc/stc.h>".}
proc getIndent*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetIndent", header: "<wx/stc/stc.h>".}
proc setUseTabs*(this: var WxStyledTextCtrl; useTabs: bool) {.cdecl, 
    importcpp: "SetUseTabs", header: "<wx/stc/stc.h>".}
proc getUseTabs*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetUseTabs", header: "<wx/stc/stc.h>".}
proc setLineIndentation*(this: var WxStyledTextCtrl; line: cint; 
                         indentSize: cint) {.cdecl, 
    importcpp: "SetLineIndentation", header: "<wx/stc/stc.h>".}
proc getLineIndentation*(this: WxStyledTextCtrl; line: cint): cint {.
    noSideEffect, cdecl, importcpp: "GetLineIndentation", 
    header: "<wx/stc/stc.h>".}
proc getLineIndentPosition*(this: WxStyledTextCtrl; line: cint): cint {.
    noSideEffect, cdecl, importcpp: "GetLineIndentPosition", 
    header: "<wx/stc/stc.h>".}
proc getColumn*(this: WxStyledTextCtrl; pos: cint): cint {.noSideEffect, cdecl, 
    importcpp: "GetColumn", header: "<wx/stc/stc.h>".}
proc countCharacters*(this: var WxStyledTextCtrl; startPos: cint; endPos: cint): cint {.
    cdecl, importcpp: "CountCharacters", header: "<wx/stc/stc.h>".}
proc setUseHorizontalScrollBar*(this: var WxStyledTextCtrl; show: bool) {.cdecl, 
    importcpp: "SetUseHorizontalScrollBar", header: "<wx/stc/stc.h>".}
proc getUseHorizontalScrollBar*(this: WxStyledTextCtrl): bool {.noSideEffect, 
    cdecl, importcpp: "GetUseHorizontalScrollBar", header: "<wx/stc/stc.h>".}
proc setIndentationGuides*(this: var WxStyledTextCtrl; indentView: cint) {.
    cdecl, importcpp: "SetIndentationGuides", header: "<wx/stc/stc.h>".}
proc getIndentationGuides*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetIndentationGuides", header: "<wx/stc/stc.h>".}
proc setHighlightGuide*(this: var WxStyledTextCtrl; column: cint) {.cdecl, 
    importcpp: "SetHighlightGuide", header: "<wx/stc/stc.h>".}
proc getHighlightGuide*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetHighlightGuide", header: "<wx/stc/stc.h>".}
proc getLineEndPosition*(this: WxStyledTextCtrl; line: cint): cint {.
    noSideEffect, cdecl, importcpp: "GetLineEndPosition", 
    header: "<wx/stc/stc.h>".}
proc getCodePage*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetCodePage", header: "<wx/stc/stc.h>".}
proc getCaretForeground*(this: WxStyledTextCtrl): WxColour {.noSideEffect, 
    cdecl, importcpp: "GetCaretForeground", header: "<wx/stc/stc.h>".}
proc getReadOnly*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetReadOnly", header: "<wx/stc/stc.h>".}
proc setCurrentPos*(this: var WxStyledTextCtrl; pos: cint) {.cdecl, 
    importcpp: "SetCurrentPos", header: "<wx/stc/stc.h>".}
proc setSelectionStart*(this: var WxStyledTextCtrl; pos: cint) {.cdecl, 
    importcpp: "SetSelectionStart", header: "<wx/stc/stc.h>".}
proc getSelectionStart*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetSelectionStart", header: "<wx/stc/stc.h>".}
proc setSelectionEnd*(this: var WxStyledTextCtrl; pos: cint) {.cdecl, 
    importcpp: "SetSelectionEnd", header: "<wx/stc/stc.h>".}
proc getSelectionEnd*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetSelectionEnd", header: "<wx/stc/stc.h>".}
proc setEmptySelection*(this: var WxStyledTextCtrl; pos: cint) {.cdecl, 
    importcpp: "SetEmptySelection", header: "<wx/stc/stc.h>".}
proc setPrintMagnification*(this: var WxStyledTextCtrl; magnification: cint) {.
    cdecl, importcpp: "SetPrintMagnification", header: "<wx/stc/stc.h>".}
proc getPrintMagnification*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetPrintMagnification", header: "<wx/stc/stc.h>".}
proc setPrintColourMode*(this: var WxStyledTextCtrl; mode: cint) {.cdecl, 
    importcpp: "SetPrintColourMode", header: "<wx/stc/stc.h>".}
proc getPrintColourMode*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetPrintColourMode", header: "<wx/stc/stc.h>".}
proc findText*(this: var WxStyledTextCtrl; minPos: cint; maxPos: cint; 
               text: WxString; flags: cint = 0): cint {.cdecl, 
    importcpp: "FindText", header: "<wx/stc/stc.h>".}
proc formatRange*(this: var WxStyledTextCtrl; doDraw: bool; startPos: cint; 
                  endPos: cint; draw: ptr WxDC; target: ptr WxDC; 
                  renderRect: WxRect; pageRect: WxRect): cint {.cdecl, 
    importcpp: "FormatRange", header: "<wx/stc/stc.h>".}
proc getFirstVisibleLine*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetFirstVisibleLine", header: "<wx/stc/stc.h>".}
proc getLine*(this: WxStyledTextCtrl; line: cint): WxString {.noSideEffect, 
    cdecl, importcpp: "GetLine", header: "<wx/stc/stc.h>".}
proc getLineCount*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetLineCount", header: "<wx/stc/stc.h>".}
proc setMarginLeft*(this: var WxStyledTextCtrl; pixelWidth: cint) {.cdecl, 
    importcpp: "SetMarginLeft", header: "<wx/stc/stc.h>".}
proc getMarginLeft*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetMarginLeft", header: "<wx/stc/stc.h>".}
proc setMarginRight*(this: var WxStyledTextCtrl; pixelWidth: cint) {.cdecl, 
    importcpp: "SetMarginRight", header: "<wx/stc/stc.h>".}
proc getMarginRight*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetMarginRight", header: "<wx/stc/stc.h>".}
proc getModify*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetModify", header: "<wx/stc/stc.h>".}
proc getSelectedText*(this: var WxStyledTextCtrl): WxString {.cdecl, 
    importcpp: "GetSelectedText", header: "<wx/stc/stc.h>".}
proc getTextRange*(this: var WxStyledTextCtrl; startPos: cint; endPos: cint): WxString {.
    cdecl, importcpp: "GetTextRange", header: "<wx/stc/stc.h>".}
proc hideSelection*(this: var WxStyledTextCtrl; normal: bool) {.cdecl, 
    importcpp: "HideSelection", header: "<wx/stc/stc.h>".}
proc lineFromPosition*(this: WxStyledTextCtrl; pos: cint): cint {.noSideEffect, 
    cdecl, importcpp: "LineFromPosition", header: "<wx/stc/stc.h>".}
proc positionFromLine*(this: WxStyledTextCtrl; line: cint): cint {.noSideEffect, 
    cdecl, importcpp: "PositionFromLine", header: "<wx/stc/stc.h>".}
proc lineScroll*(this: var WxStyledTextCtrl; columns: cint; lines: cint) {.
    cdecl, importcpp: "LineScroll", header: "<wx/stc/stc.h>".}
proc ensureCaretVisible*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "EnsureCaretVisible", header: "<wx/stc/stc.h>".}
proc replaceSelection*(this: var WxStyledTextCtrl; text: WxString) {.cdecl, 
    importcpp: "ReplaceSelection", header: "<wx/stc/stc.h>".}
proc setReadOnly*(this: var WxStyledTextCtrl; readOnly: bool) {.cdecl, 
    importcpp: "SetReadOnly", header: "<wx/stc/stc.h>".}
proc canPaste*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "CanPaste", header: "<wx/stc/stc.h>".}
proc canUndo*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "CanUndo", header: "<wx/stc/stc.h>".}
proc emptyUndoBuffer*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "EmptyUndoBuffer", header: "<wx/stc/stc.h>".}
proc undo*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "Undo", 
    header: "<wx/stc/stc.h>".}
proc cut*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "Cut", 
                                        header: "<wx/stc/stc.h>".}
proc copy*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "Copy", 
    header: "<wx/stc/stc.h>".}
proc paste*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "Paste", 
    header: "<wx/stc/stc.h>".}
proc clear*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "Clear", 
    header: "<wx/stc/stc.h>".}
proc setText*(this: var WxStyledTextCtrl; text: WxString) {.cdecl, 
    importcpp: "SetText", header: "<wx/stc/stc.h>".}
proc getText*(this: WxStyledTextCtrl): WxString {.noSideEffect, cdecl, 
    importcpp: "GetText", header: "<wx/stc/stc.h>".}
proc getTextLength*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetTextLength", header: "<wx/stc/stc.h>".}
proc setOvertype*(this: var WxStyledTextCtrl; overtype: bool) {.cdecl, 
    importcpp: "SetOvertype", header: "<wx/stc/stc.h>".}
proc getOvertype*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetOvertype", header: "<wx/stc/stc.h>".}
proc setCaretWidth*(this: var WxStyledTextCtrl; pixelWidth: cint) {.cdecl, 
    importcpp: "SetCaretWidth", header: "<wx/stc/stc.h>".}
proc getCaretWidth*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetCaretWidth", header: "<wx/stc/stc.h>".}
proc setTargetStart*(this: var WxStyledTextCtrl; pos: cint) {.cdecl, 
    importcpp: "SetTargetStart", header: "<wx/stc/stc.h>".}
proc getTargetStart*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetTargetStart", header: "<wx/stc/stc.h>".}
proc setTargetEnd*(this: var WxStyledTextCtrl; pos: cint) {.cdecl, 
    importcpp: "SetTargetEnd", header: "<wx/stc/stc.h>".}
proc getTargetEnd*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetTargetEnd", header: "<wx/stc/stc.h>".}
proc replaceTarget*(this: var WxStyledTextCtrl; text: WxString): cint {.cdecl, 
    importcpp: "ReplaceTarget", header: "<wx/stc/stc.h>".}
proc replaceTargetRE*(this: var WxStyledTextCtrl; text: WxString): cint {.cdecl, 
    importcpp: "ReplaceTargetRE", header: "<wx/stc/stc.h>".}
proc searchInTarget*(this: var WxStyledTextCtrl; text: WxString): cint {.cdecl, 
    importcpp: "SearchInTarget", header: "<wx/stc/stc.h>".}
proc setSearchFlags*(this: var WxStyledTextCtrl; flags: cint) {.cdecl, 
    importcpp: "SetSearchFlags", header: "<wx/stc/stc.h>".}
proc getSearchFlags*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetSearchFlags", header: "<wx/stc/stc.h>".}
proc callTipShow*(this: var WxStyledTextCtrl; pos: cint; definition: WxString) {.
    cdecl, importcpp: "CallTipShow", header: "<wx/stc/stc.h>".}
proc callTipCancel*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "CallTipCancel", header: "<wx/stc/stc.h>".}
proc callTipActive*(this: var WxStyledTextCtrl): bool {.cdecl, 
    importcpp: "CallTipActive", header: "<wx/stc/stc.h>".}
proc callTipPosAtStart*(this: var WxStyledTextCtrl): cint {.cdecl, 
    importcpp: "CallTipPosAtStart", header: "<wx/stc/stc.h>".}
proc callTipSetHighlight*(this: var WxStyledTextCtrl; start: cint; `end`: cint) {.
    cdecl, importcpp: "CallTipSetHighlight", header: "<wx/stc/stc.h>".}
proc callTipSetBackground*(this: var WxStyledTextCtrl; back: WxColour) {.cdecl, 
    importcpp: "CallTipSetBackground", header: "<wx/stc/stc.h>".}
proc callTipSetForeground*(this: var WxStyledTextCtrl; fore: WxColour) {.cdecl, 
    importcpp: "CallTipSetForeground", header: "<wx/stc/stc.h>".}
proc callTipSetForegroundHighlight*(this: var WxStyledTextCtrl; fore: WxColour) {.
    cdecl, importcpp: "CallTipSetForegroundHighlight", header: "<wx/stc/stc.h>".}
proc callTipUseStyle*(this: var WxStyledTextCtrl; tabSize: cint) {.cdecl, 
    importcpp: "CallTipUseStyle", header: "<wx/stc/stc.h>".}
proc callTipSetPosition*(this: var WxStyledTextCtrl; above: bool) {.cdecl, 
    importcpp: "CallTipSetPosition", header: "<wx/stc/stc.h>".}
proc visibleFromDocLine*(this: var WxStyledTextCtrl; line: cint): cint {.cdecl, 
    importcpp: "VisibleFromDocLine", header: "<wx/stc/stc.h>".}
proc docLineFromVisible*(this: var WxStyledTextCtrl; lineDisplay: cint): cint {.
    cdecl, importcpp: "DocLineFromVisible", header: "<wx/stc/stc.h>".}
proc wrapCount*(this: var WxStyledTextCtrl; line: cint): cint {.cdecl, 
    importcpp: "WrapCount", header: "<wx/stc/stc.h>".}
proc setFoldLevel*(this: var WxStyledTextCtrl; line: cint; level: cint) {.cdecl, 
    importcpp: "SetFoldLevel", header: "<wx/stc/stc.h>".}
proc getFoldLevel*(this: WxStyledTextCtrl; line: cint): cint {.noSideEffect, 
    cdecl, importcpp: "GetFoldLevel", header: "<wx/stc/stc.h>".}
proc getLastChild*(this: WxStyledTextCtrl; line: cint; level: cint): cint {.
    noSideEffect, cdecl, importcpp: "GetLastChild", header: "<wx/stc/stc.h>".}
proc getFoldParent*(this: WxStyledTextCtrl; line: cint): cint {.noSideEffect, 
    cdecl, importcpp: "GetFoldParent", header: "<wx/stc/stc.h>".}
proc showLines*(this: var WxStyledTextCtrl; lineStart: cint; lineEnd: cint) {.
    cdecl, importcpp: "ShowLines", header: "<wx/stc/stc.h>".}
proc hideLines*(this: var WxStyledTextCtrl; lineStart: cint; lineEnd: cint) {.
    cdecl, importcpp: "HideLines", header: "<wx/stc/stc.h>".}
proc getLineVisible*(this: WxStyledTextCtrl; line: cint): bool {.noSideEffect, 
    cdecl, importcpp: "GetLineVisible", header: "<wx/stc/stc.h>".}
proc getAllLinesVisible*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetAllLinesVisible", header: "<wx/stc/stc.h>".}
proc setFoldExpanded*(this: var WxStyledTextCtrl; line: cint; expanded: bool) {.
    cdecl, importcpp: "SetFoldExpanded", header: "<wx/stc/stc.h>".}
proc getFoldExpanded*(this: WxStyledTextCtrl; line: cint): bool {.noSideEffect, 
    cdecl, importcpp: "GetFoldExpanded", header: "<wx/stc/stc.h>".}
proc toggleFold*(this: var WxStyledTextCtrl; line: cint) {.cdecl, 
    importcpp: "ToggleFold", header: "<wx/stc/stc.h>".}
proc ensureVisible*(this: var WxStyledTextCtrl; line: cint) {.cdecl, 
    importcpp: "EnsureVisible", header: "<wx/stc/stc.h>".}
proc setFoldFlags*(this: var WxStyledTextCtrl; flags: cint) {.cdecl, 
    importcpp: "SetFoldFlags", header: "<wx/stc/stc.h>".}
proc ensureVisibleEnforcePolicy*(this: var WxStyledTextCtrl; line: cint) {.
    cdecl, importcpp: "EnsureVisibleEnforcePolicy", header: "<wx/stc/stc.h>".}
proc setTabIndents*(this: var WxStyledTextCtrl; tabIndents: bool) {.cdecl, 
    importcpp: "SetTabIndents", header: "<wx/stc/stc.h>".}
proc getTabIndents*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetTabIndents", header: "<wx/stc/stc.h>".}
proc setBackSpaceUnIndents*(this: var WxStyledTextCtrl; bsUnIndents: bool) {.
    cdecl, importcpp: "SetBackSpaceUnIndents", header: "<wx/stc/stc.h>".}
proc getBackSpaceUnIndents*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetBackSpaceUnIndents", header: "<wx/stc/stc.h>".}
proc setMouseDwellTime*(this: var WxStyledTextCtrl; periodMilliseconds: cint) {.
    cdecl, importcpp: "SetMouseDwellTime", header: "<wx/stc/stc.h>".}
proc getMouseDwellTime*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetMouseDwellTime", header: "<wx/stc/stc.h>".}
proc wordStartPosition*(this: var WxStyledTextCtrl; pos: cint; 
                        onlyWordCharacters: bool): cint {.cdecl, 
    importcpp: "WordStartPosition", header: "<wx/stc/stc.h>".}
proc wordEndPosition*(this: var WxStyledTextCtrl; pos: cint; 
                      onlyWordCharacters: bool): cint {.cdecl, 
    importcpp: "WordEndPosition", header: "<wx/stc/stc.h>".}
proc setWrapMode*(this: var WxStyledTextCtrl; mode: cint) {.cdecl, 
    importcpp: "SetWrapMode", header: "<wx/stc/stc.h>".}
proc getWrapMode*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetWrapMode", header: "<wx/stc/stc.h>".}
proc setWrapVisualFlags*(this: var WxStyledTextCtrl; wrapVisualFlags: cint) {.
    cdecl, importcpp: "SetWrapVisualFlags", header: "<wx/stc/stc.h>".}
proc getWrapVisualFlags*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetWrapVisualFlags", header: "<wx/stc/stc.h>".}
proc setWrapVisualFlagsLocation*(this: var WxStyledTextCtrl; 
                                 wrapVisualFlagsLocation: cint) {.cdecl, 
    importcpp: "SetWrapVisualFlagsLocation", header: "<wx/stc/stc.h>".}
proc getWrapVisualFlagsLocation*(this: WxStyledTextCtrl): cint {.noSideEffect, 
    cdecl, importcpp: "GetWrapVisualFlagsLocation", header: "<wx/stc/stc.h>".}
proc setWrapStartIndent*(this: var WxStyledTextCtrl; indent: cint) {.cdecl, 
    importcpp: "SetWrapStartIndent", header: "<wx/stc/stc.h>".}
proc getWrapStartIndent*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetWrapStartIndent", header: "<wx/stc/stc.h>".}
proc setWrapIndentMode*(this: var WxStyledTextCtrl; mode: cint) {.cdecl, 
    importcpp: "SetWrapIndentMode", header: "<wx/stc/stc.h>".}
proc getWrapIndentMode*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetWrapIndentMode", header: "<wx/stc/stc.h>".}
proc setLayoutCache*(this: var WxStyledTextCtrl; mode: cint) {.cdecl, 
    importcpp: "SetLayoutCache", header: "<wx/stc/stc.h>".}
proc getLayoutCache*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetLayoutCache", header: "<wx/stc/stc.h>".}
proc setScrollWidth*(this: var WxStyledTextCtrl; pixelWidth: cint) {.cdecl, 
    importcpp: "SetScrollWidth", header: "<wx/stc/stc.h>".}
proc getScrollWidth*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetScrollWidth", header: "<wx/stc/stc.h>".}
proc setScrollWidthTracking*(this: var WxStyledTextCtrl; tracking: bool) {.
    cdecl, importcpp: "SetScrollWidthTracking", header: "<wx/stc/stc.h>".}
proc getScrollWidthTracking*(this: WxStyledTextCtrl): bool {.noSideEffect, 
    cdecl, importcpp: "GetScrollWidthTracking", header: "<wx/stc/stc.h>".}
proc textWidth*(this: var WxStyledTextCtrl; style: cint; text: WxString): cint {.
    cdecl, importcpp: "TextWidth", header: "<wx/stc/stc.h>".}
proc setEndAtLastLine*(this: var WxStyledTextCtrl; endAtLastLine: bool) {.cdecl, 
    importcpp: "SetEndAtLastLine", header: "<wx/stc/stc.h>".}
proc getEndAtLastLine*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetEndAtLastLine", header: "<wx/stc/stc.h>".}
proc textHeight*(this: var WxStyledTextCtrl; line: cint): cint {.cdecl, 
    importcpp: "TextHeight", header: "<wx/stc/stc.h>".}
proc setUseVerticalScrollBar*(this: var WxStyledTextCtrl; show: bool) {.cdecl, 
    importcpp: "SetUseVerticalScrollBar", header: "<wx/stc/stc.h>".}
proc getUseVerticalScrollBar*(this: WxStyledTextCtrl): bool {.noSideEffect, 
    cdecl, importcpp: "GetUseVerticalScrollBar", header: "<wx/stc/stc.h>".}
proc appendText*(this: var WxStyledTextCtrl; text: WxString) {.cdecl, 
    importcpp: "AppendText", header: "<wx/stc/stc.h>".}
proc getTwoPhaseDraw*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetTwoPhaseDraw", header: "<wx/stc/stc.h>".}
proc setTwoPhaseDraw*(this: var WxStyledTextCtrl; twoPhase: bool) {.cdecl, 
    importcpp: "SetTwoPhaseDraw", header: "<wx/stc/stc.h>".}
proc setFirstVisibleLine*(this: var WxStyledTextCtrl; lineDisplay: cint) {.
    cdecl, importcpp: "SetFirstVisibleLine", header: "<wx/stc/stc.h>".}
proc setMultiPaste*(this: var WxStyledTextCtrl; multiPaste: cint) {.cdecl, 
    importcpp: "SetMultiPaste", header: "<wx/stc/stc.h>".}
proc getMultiPaste*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetMultiPaste", header: "<wx/stc/stc.h>".}
proc getTag*(this: WxStyledTextCtrl; tagNumber: cint): WxString {.noSideEffect, 
    cdecl, importcpp: "GetTag", header: "<wx/stc/stc.h>".}
proc targetFromSelection*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "TargetFromSelection", header: "<wx/stc/stc.h>".}
proc linesJoin*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "LinesJoin", 
    header: "<wx/stc/stc.h>".}
proc linesSplit*(this: var WxStyledTextCtrl; pixelWidth: cint) {.cdecl, 
    importcpp: "LinesSplit", header: "<wx/stc/stc.h>".}
proc setFoldMarginColour*(this: var WxStyledTextCtrl; useSetting: bool; 
                          back: WxColour) {.cdecl, 
    importcpp: "SetFoldMarginColour", header: "<wx/stc/stc.h>".}
proc setFoldMarginHiColour*(this: var WxStyledTextCtrl; useSetting: bool; 
                            fore: WxColour) {.cdecl, 
    importcpp: "SetFoldMarginHiColour", header: "<wx/stc/stc.h>".}
proc lineDown*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "LineDown", 
    header: "<wx/stc/stc.h>".}
proc lineDownExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "LineDownExtend", header: "<wx/stc/stc.h>".}
proc lineUp*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "LineUp", 
    header: "<wx/stc/stc.h>".}
proc lineUpExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "LineUpExtend", header: "<wx/stc/stc.h>".}
proc charLeft*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "CharLeft", 
    header: "<wx/stc/stc.h>".}
proc charLeftExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "CharLeftExtend", header: "<wx/stc/stc.h>".}
proc charRight*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "CharRight", 
    header: "<wx/stc/stc.h>".}
proc charRightExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "CharRightExtend", header: "<wx/stc/stc.h>".}
proc wordLeft*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "WordLeft", 
    header: "<wx/stc/stc.h>".}
proc wordLeftExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "WordLeftExtend", header: "<wx/stc/stc.h>".}
proc wordRight*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "WordRight", 
    header: "<wx/stc/stc.h>".}
proc wordRightExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "WordRightExtend", header: "<wx/stc/stc.h>".}
proc home*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "Home", 
    header: "<wx/stc/stc.h>".}
proc homeExtend*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "HomeExtend", 
    header: "<wx/stc/stc.h>".}
proc lineEnd*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "LineEnd", 
    header: "<wx/stc/stc.h>".}
proc lineEndExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "LineEndExtend", header: "<wx/stc/stc.h>".}
proc documentStart*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "DocumentStart", header: "<wx/stc/stc.h>".}
proc documentStartExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "DocumentStartExtend", header: "<wx/stc/stc.h>".}
proc documentEnd*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "DocumentEnd", 
    header: "<wx/stc/stc.h>".}
proc documentEndExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "DocumentEndExtend", header: "<wx/stc/stc.h>".}
proc pageUp*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "PageUp", 
    header: "<wx/stc/stc.h>".}
proc pageUpExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "PageUpExtend", header: "<wx/stc/stc.h>".}
proc pageDown*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "PageDown", 
    header: "<wx/stc/stc.h>".}
proc pageDownExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "PageDownExtend", header: "<wx/stc/stc.h>".}
proc editToggleOvertype*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "EditToggleOvertype", header: "<wx/stc/stc.h>".}
proc cancel*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "Cancel", 
    header: "<wx/stc/stc.h>".}
proc deleteBack*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "DeleteBack", 
    header: "<wx/stc/stc.h>".}
proc tab*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "Tab", 
                                        header: "<wx/stc/stc.h>".}
proc backTab*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "BackTab", 
    header: "<wx/stc/stc.h>".}
proc newLine*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "NewLine", 
    header: "<wx/stc/stc.h>".}
proc formFeed*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "FormFeed", 
    header: "<wx/stc/stc.h>".}
proc vCHome*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "VCHome", 
    header: "<wx/stc/stc.h>".}
proc vCHomeExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "VCHomeExtend", header: "<wx/stc/stc.h>".}
proc zoomIn*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "ZoomIn", 
    header: "<wx/stc/stc.h>".}
proc zoomOut*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "ZoomOut", 
    header: "<wx/stc/stc.h>".}
proc delWordLeft*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "DelWordLeft", 
    header: "<wx/stc/stc.h>".}
proc delWordRight*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "DelWordRight", header: "<wx/stc/stc.h>".}
proc delWordRightEnd*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "DelWordRightEnd", header: "<wx/stc/stc.h>".}
proc lineCut*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "LineCut", 
    header: "<wx/stc/stc.h>".}
proc lineDelete*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "LineDelete", 
    header: "<wx/stc/stc.h>".}
proc lineTranspose*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "LineTranspose", header: "<wx/stc/stc.h>".}
proc lineDuplicate*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "LineDuplicate", header: "<wx/stc/stc.h>".}
proc lowerCase*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "LowerCase", 
    header: "<wx/stc/stc.h>".}
proc upperCase*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "UpperCase", 
    header: "<wx/stc/stc.h>".}
proc lineScrollDown*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "LineScrollDown", header: "<wx/stc/stc.h>".}
proc lineScrollUp*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "LineScrollUp", header: "<wx/stc/stc.h>".}
proc deleteBackNotLine*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "DeleteBackNotLine", header: "<wx/stc/stc.h>".}
proc homeDisplay*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "HomeDisplay", 
    header: "<wx/stc/stc.h>".}
proc homeDisplayExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "HomeDisplayExtend", header: "<wx/stc/stc.h>".}
proc lineEndDisplay*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "LineEndDisplay", header: "<wx/stc/stc.h>".}
proc lineEndDisplayExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "LineEndDisplayExtend", header: "<wx/stc/stc.h>".}
proc homeWrap*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "HomeWrap", 
    header: "<wx/stc/stc.h>".}
proc homeWrapExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "HomeWrapExtend", header: "<wx/stc/stc.h>".}
proc lineEndWrap*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "LineEndWrap", 
    header: "<wx/stc/stc.h>".}
proc lineEndWrapExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "LineEndWrapExtend", header: "<wx/stc/stc.h>".}
proc vCHomeWrap*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "VCHomeWrap", 
    header: "<wx/stc/stc.h>".}
proc vCHomeWrapExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "VCHomeWrapExtend", header: "<wx/stc/stc.h>".}
proc lineCopy*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "LineCopy", 
    header: "<wx/stc/stc.h>".}
proc moveCaretInsideView*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "MoveCaretInsideView", header: "<wx/stc/stc.h>".}
proc lineLength*(this: WxStyledTextCtrl; line: cint): cint {.noSideEffect, 
    cdecl, importcpp: "LineLength", header: "<wx/stc/stc.h>".}
proc braceHighlight*(this: var WxStyledTextCtrl; pos1: cint; pos2: cint) {.
    cdecl, importcpp: "BraceHighlight", header: "<wx/stc/stc.h>".}
proc braceHighlightIndicator*(this: var WxStyledTextCtrl; 
                              useBraceHighlightIndicator: bool; indicator: cint) {.
    cdecl, importcpp: "BraceHighlightIndicator", header: "<wx/stc/stc.h>".}
proc braceBadLight*(this: var WxStyledTextCtrl; pos: cint) {.cdecl, 
    importcpp: "BraceBadLight", header: "<wx/stc/stc.h>".}
proc braceBadLightIndicator*(this: var WxStyledTextCtrl; 
                             useBraceBadLightIndicator: bool; indicator: cint) {.
    cdecl, importcpp: "BraceBadLightIndicator", header: "<wx/stc/stc.h>".}
proc braceMatch*(this: var WxStyledTextCtrl; pos: cint): cint {.cdecl, 
    importcpp: "BraceMatch", header: "<wx/stc/stc.h>".}
proc getViewEOL*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetViewEOL", header: "<wx/stc/stc.h>".}
proc setViewEOL*(this: var WxStyledTextCtrl; visible: bool) {.cdecl, 
    importcpp: "SetViewEOL", header: "<wx/stc/stc.h>".}
proc getDocPointer*(this: var WxStyledTextCtrl): pointer {.cdecl, 
    importcpp: "GetDocPointer", header: "<wx/stc/stc.h>".}
proc setDocPointer*(this: var WxStyledTextCtrl; docPointer: pointer) {.cdecl, 
    importcpp: "SetDocPointer", header: "<wx/stc/stc.h>".}
proc setModEventMask*(this: var WxStyledTextCtrl; mask: cint) {.cdecl, 
    importcpp: "SetModEventMask", header: "<wx/stc/stc.h>".}
proc getEdgeColumn*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetEdgeColumn", header: "<wx/stc/stc.h>".}
proc setEdgeColumn*(this: var WxStyledTextCtrl; column: cint) {.cdecl, 
    importcpp: "SetEdgeColumn", header: "<wx/stc/stc.h>".}
proc getEdgeMode*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetEdgeMode", header: "<wx/stc/stc.h>".}
proc setEdgeMode*(this: var WxStyledTextCtrl; mode: cint) {.cdecl, 
    importcpp: "SetEdgeMode", header: "<wx/stc/stc.h>".}
proc getEdgeColour*(this: WxStyledTextCtrl): WxColour {.noSideEffect, cdecl, 
    importcpp: "GetEdgeColour", header: "<wx/stc/stc.h>".}
proc setEdgeColour*(this: var WxStyledTextCtrl; edgeColour: WxColour) {.cdecl, 
    importcpp: "SetEdgeColour", header: "<wx/stc/stc.h>".}
proc searchAnchor*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "SearchAnchor", header: "<wx/stc/stc.h>".}
proc searchNext*(this: var WxStyledTextCtrl; flags: cint; text: WxString): cint {.
    cdecl, importcpp: "SearchNext", header: "<wx/stc/stc.h>".}
proc searchPrev*(this: var WxStyledTextCtrl; flags: cint; text: WxString): cint {.
    cdecl, importcpp: "SearchPrev", header: "<wx/stc/stc.h>".}
proc linesOnScreen*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "LinesOnScreen", header: "<wx/stc/stc.h>".}
proc usePopUp*(this: var WxStyledTextCtrl; allowPopUp: bool) {.cdecl, 
    importcpp: "UsePopUp", header: "<wx/stc/stc.h>".}
proc selectionIsRectangle*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "SelectionIsRectangle", header: "<wx/stc/stc.h>".}
proc setZoom*(this: var WxStyledTextCtrl; zoom: cint) {.cdecl, 
    importcpp: "SetZoom", header: "<wx/stc/stc.h>".}
proc getZoom*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetZoom", header: "<wx/stc/stc.h>".}
proc createDocument*(this: var WxStyledTextCtrl): pointer {.cdecl, 
    importcpp: "CreateDocument", header: "<wx/stc/stc.h>".}
proc addRefDocument*(this: var WxStyledTextCtrl; docPointer: pointer) {.cdecl, 
    importcpp: "AddRefDocument", header: "<wx/stc/stc.h>".}
proc releaseDocument*(this: var WxStyledTextCtrl; docPointer: pointer) {.cdecl, 
    importcpp: "ReleaseDocument", header: "<wx/stc/stc.h>".}
proc getModEventMask*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetModEventMask", header: "<wx/stc/stc.h>".}
proc setSTCFocus*(this: var WxStyledTextCtrl; focus: bool) {.cdecl, 
    importcpp: "SetSTCFocus", header: "<wx/stc/stc.h>".}
proc getSTCFocus*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetSTCFocus", header: "<wx/stc/stc.h>".}
proc setStatus*(this: var WxStyledTextCtrl; statusCode: cint) {.cdecl, 
    importcpp: "SetStatus", header: "<wx/stc/stc.h>".}
proc getStatus*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetStatus", header: "<wx/stc/stc.h>".}
proc setMouseDownCaptures*(this: var WxStyledTextCtrl; captures: bool) {.cdecl, 
    importcpp: "SetMouseDownCaptures", header: "<wx/stc/stc.h>".}
proc getMouseDownCaptures*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetMouseDownCaptures", header: "<wx/stc/stc.h>".}
proc setSTCCursor*(this: var WxStyledTextCtrl; cursorType: cint) {.cdecl, 
    importcpp: "SetSTCCursor", header: "<wx/stc/stc.h>".}
proc getSTCCursor*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetSTCCursor", header: "<wx/stc/stc.h>".}
proc setControlCharSymbol*(this: var WxStyledTextCtrl; symbol: cint) {.cdecl, 
    importcpp: "SetControlCharSymbol", header: "<wx/stc/stc.h>".}
proc getControlCharSymbol*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetControlCharSymbol", header: "<wx/stc/stc.h>".}
proc wordPartLeft*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "WordPartLeft", header: "<wx/stc/stc.h>".}
proc wordPartLeftExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "WordPartLeftExtend", header: "<wx/stc/stc.h>".}
proc wordPartRight*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "WordPartRight", header: "<wx/stc/stc.h>".}
proc wordPartRightExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "WordPartRightExtend", header: "<wx/stc/stc.h>".}
proc setVisiblePolicy*(this: var WxStyledTextCtrl; visiblePolicy: cint; 
                       visibleSlop: cint) {.cdecl, 
    importcpp: "SetVisiblePolicy", header: "<wx/stc/stc.h>".}
proc delLineLeft*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "DelLineLeft", 
    header: "<wx/stc/stc.h>".}
proc delLineRight*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "DelLineRight", header: "<wx/stc/stc.h>".}
proc setXOffset*(this: var WxStyledTextCtrl; newOffset: cint) {.cdecl, 
    importcpp: "SetXOffset", header: "<wx/stc/stc.h>".}
proc getXOffset*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetXOffset", header: "<wx/stc/stc.h>".}
proc chooseCaretX*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "ChooseCaretX", header: "<wx/stc/stc.h>".}
proc setXCaretPolicy*(this: var WxStyledTextCtrl; caretPolicy: cint; 
                      caretSlop: cint) {.cdecl, importcpp: "SetXCaretPolicy", 
    header: "<wx/stc/stc.h>".}
proc setYCaretPolicy*(this: var WxStyledTextCtrl; caretPolicy: cint; 
                      caretSlop: cint) {.cdecl, importcpp: "SetYCaretPolicy", 
    header: "<wx/stc/stc.h>".}
proc setPrintWrapMode*(this: var WxStyledTextCtrl; mode: cint) {.cdecl, 
    importcpp: "SetPrintWrapMode", header: "<wx/stc/stc.h>".}
proc getPrintWrapMode*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetPrintWrapMode", header: "<wx/stc/stc.h>".}
proc setHotspotActiveForeground*(this: var WxStyledTextCtrl; useSetting: bool; 
                                 fore: WxColour) {.cdecl, 
    importcpp: "SetHotspotActiveForeground", header: "<wx/stc/stc.h>".}
proc getHotspotActiveForeground*(this: WxStyledTextCtrl): WxColour {.
    noSideEffect, cdecl, importcpp: "GetHotspotActiveForeground", 
    header: "<wx/stc/stc.h>".}
proc setHotspotActiveBackground*(this: var WxStyledTextCtrl; useSetting: bool; 
                                 back: WxColour) {.cdecl, 
    importcpp: "SetHotspotActiveBackground", header: "<wx/stc/stc.h>".}
proc getHotspotActiveBackground*(this: WxStyledTextCtrl): WxColour {.
    noSideEffect, cdecl, importcpp: "GetHotspotActiveBackground", 
    header: "<wx/stc/stc.h>".}
proc setHotspotActiveUnderline*(this: var WxStyledTextCtrl; underline: bool) {.
    cdecl, importcpp: "SetHotspotActiveUnderline", header: "<wx/stc/stc.h>".}
proc getHotspotActiveUnderline*(this: WxStyledTextCtrl): bool {.noSideEffect, 
    cdecl, importcpp: "GetHotspotActiveUnderline", header: "<wx/stc/stc.h>".}
proc setHotspotSingleLine*(this: var WxStyledTextCtrl; singleLine: bool) {.
    cdecl, importcpp: "SetHotspotSingleLine", header: "<wx/stc/stc.h>".}
proc getHotspotSingleLine*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetHotspotSingleLine", header: "<wx/stc/stc.h>".}
proc paraDown*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "ParaDown", 
    header: "<wx/stc/stc.h>".}
proc paraDownExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "ParaDownExtend", header: "<wx/stc/stc.h>".}
proc paraUp*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "ParaUp", 
    header: "<wx/stc/stc.h>".}
proc paraUpExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "ParaUpExtend", header: "<wx/stc/stc.h>".}
proc positionBefore*(this: var WxStyledTextCtrl; pos: cint): cint {.cdecl, 
    importcpp: "PositionBefore", header: "<wx/stc/stc.h>".}
proc positionAfter*(this: var WxStyledTextCtrl; pos: cint): cint {.cdecl, 
    importcpp: "PositionAfter", header: "<wx/stc/stc.h>".}
proc copyRange*(this: var WxStyledTextCtrl; start: cint; `end`: cint) {.cdecl, 
    importcpp: "CopyRange", header: "<wx/stc/stc.h>".}
proc copyText*(this: var WxStyledTextCtrl; length: cint; text: WxString) {.
    cdecl, importcpp: "CopyText", header: "<wx/stc/stc.h>".}
proc setSelectionMode*(this: var WxStyledTextCtrl; mode: cint) {.cdecl, 
    importcpp: "SetSelectionMode", header: "<wx/stc/stc.h>".}
proc getSelectionMode*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetSelectionMode", header: "<wx/stc/stc.h>".}
proc getLineSelStartPosition*(this: var WxStyledTextCtrl; line: cint): cint {.
    cdecl, importcpp: "GetLineSelStartPosition", header: "<wx/stc/stc.h>".}
proc getLineSelEndPosition*(this: var WxStyledTextCtrl; line: cint): cint {.
    cdecl, importcpp: "GetLineSelEndPosition", header: "<wx/stc/stc.h>".}
proc lineDownRectExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "LineDownRectExtend", header: "<wx/stc/stc.h>".}
proc lineUpRectExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "LineUpRectExtend", header: "<wx/stc/stc.h>".}
proc charLeftRectExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "CharLeftRectExtend", header: "<wx/stc/stc.h>".}
proc charRightRectExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "CharRightRectExtend", header: "<wx/stc/stc.h>".}
proc homeRectExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "HomeRectExtend", header: "<wx/stc/stc.h>".}
proc vCHomeRectExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "VCHomeRectExtend", header: "<wx/stc/stc.h>".}
proc lineEndRectExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "LineEndRectExtend", header: "<wx/stc/stc.h>".}
proc pageUpRectExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "PageUpRectExtend", header: "<wx/stc/stc.h>".}
proc pageDownRectExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "PageDownRectExtend", header: "<wx/stc/stc.h>".}
proc stutteredPageUp*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "StutteredPageUp", header: "<wx/stc/stc.h>".}
proc stutteredPageUpExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "StutteredPageUpExtend", header: "<wx/stc/stc.h>".}
proc stutteredPageDown*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "StutteredPageDown", header: "<wx/stc/stc.h>".}
proc stutteredPageDownExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "StutteredPageDownExtend", header: "<wx/stc/stc.h>".}
proc wordLeftEnd*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "WordLeftEnd", 
    header: "<wx/stc/stc.h>".}
proc wordLeftEndExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "WordLeftEndExtend", header: "<wx/stc/stc.h>".}
proc wordRightEnd*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "WordRightEnd", header: "<wx/stc/stc.h>".}
proc wordRightEndExtend*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "WordRightEndExtend", header: "<wx/stc/stc.h>".}
proc setWhitespaceChars*(this: var WxStyledTextCtrl; characters: WxString) {.
    cdecl, importcpp: "SetWhitespaceChars", header: "<wx/stc/stc.h>".}
proc getWhitespaceChars*(this: WxStyledTextCtrl): WxString {.noSideEffect, 
    cdecl, importcpp: "GetWhitespaceChars", header: "<wx/stc/stc.h>".}
proc setPunctuationChars*(this: var WxStyledTextCtrl; characters: WxString) {.
    cdecl, importcpp: "SetPunctuationChars", header: "<wx/stc/stc.h>".}
proc getPunctuationChars*(this: WxStyledTextCtrl): WxString {.noSideEffect, 
    cdecl, importcpp: "GetPunctuationChars", header: "<wx/stc/stc.h>".}
proc setCharsDefault*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "SetCharsDefault", header: "<wx/stc/stc.h>".}
proc autoCompGetCurrent*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "AutoCompGetCurrent", header: "<wx/stc/stc.h>".}
proc autoCompSetCaseInsensitiveBehaviour*(this: var WxStyledTextCtrl; 
    behaviour: cint) {.cdecl, importcpp: "AutoCompSetCaseInsensitiveBehaviour", 
                       header: "<wx/stc/stc.h>".}
proc autoCompGetCaseInsensitiveBehaviour*(this: WxStyledTextCtrl): cint {.
    noSideEffect, cdecl, importcpp: "AutoCompGetCaseInsensitiveBehaviour", 
    header: "<wx/stc/stc.h>".}
proc allocate*(this: var WxStyledTextCtrl; bytes: cint) {.cdecl, 
    importcpp: "Allocate", header: "<wx/stc/stc.h>".}
proc findColumn*(this: var WxStyledTextCtrl; line: cint; column: cint): cint {.
    cdecl, importcpp: "FindColumn", header: "<wx/stc/stc.h>".}
proc getCaretSticky*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetCaretSticky", header: "<wx/stc/stc.h>".}
proc setCaretSticky*(this: var WxStyledTextCtrl; useCaretStickyBehaviour: cint) {.
    cdecl, importcpp: "SetCaretSticky", header: "<wx/stc/stc.h>".}
proc toggleCaretSticky*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "ToggleCaretSticky", header: "<wx/stc/stc.h>".}
proc setPasteConvertEndings*(this: var WxStyledTextCtrl; convert: bool) {.cdecl, 
    importcpp: "SetPasteConvertEndings", header: "<wx/stc/stc.h>".}
proc getPasteConvertEndings*(this: WxStyledTextCtrl): bool {.noSideEffect, 
    cdecl, importcpp: "GetPasteConvertEndings", header: "<wx/stc/stc.h>".}
proc selectionDuplicate*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "SelectionDuplicate", header: "<wx/stc/stc.h>".}
proc setCaretLineBackAlpha*(this: var WxStyledTextCtrl; alpha: cint) {.cdecl, 
    importcpp: "SetCaretLineBackAlpha", header: "<wx/stc/stc.h>".}
proc getCaretLineBackAlpha*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetCaretLineBackAlpha", header: "<wx/stc/stc.h>".}
proc setCaretStyle*(this: var WxStyledTextCtrl; caretStyle: cint) {.cdecl, 
    importcpp: "SetCaretStyle", header: "<wx/stc/stc.h>".}
proc getCaretStyle*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetCaretStyle", header: "<wx/stc/stc.h>".}
proc setIndicatorCurrent*(this: var WxStyledTextCtrl; indicator: cint) {.cdecl, 
    importcpp: "SetIndicatorCurrent", header: "<wx/stc/stc.h>".}
proc getIndicatorCurrent*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetIndicatorCurrent", header: "<wx/stc/stc.h>".}
proc setIndicatorValue*(this: var WxStyledTextCtrl; value: cint) {.cdecl, 
    importcpp: "SetIndicatorValue", header: "<wx/stc/stc.h>".}
proc getIndicatorValue*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetIndicatorValue", header: "<wx/stc/stc.h>".}
proc indicatorFillRange*(this: var WxStyledTextCtrl; position: cint; 
                         fillLength: cint) {.cdecl, 
    importcpp: "IndicatorFillRange", header: "<wx/stc/stc.h>".}
proc indicatorClearRange*(this: var WxStyledTextCtrl; position: cint; 
                          clearLength: cint) {.cdecl, 
    importcpp: "IndicatorClearRange", header: "<wx/stc/stc.h>".}
proc indicatorAllOnFor*(this: var WxStyledTextCtrl; position: cint): cint {.
    cdecl, importcpp: "IndicatorAllOnFor", header: "<wx/stc/stc.h>".}
proc indicatorValueAt*(this: var WxStyledTextCtrl; indicator: cint; 
                       position: cint): cint {.cdecl, 
    importcpp: "IndicatorValueAt", header: "<wx/stc/stc.h>".}
proc indicatorStart*(this: var WxStyledTextCtrl; indicator: cint; position: cint): cint {.
    cdecl, importcpp: "IndicatorStart", header: "<wx/stc/stc.h>".}
proc indicatorEnd*(this: var WxStyledTextCtrl; indicator: cint; position: cint): cint {.
    cdecl, importcpp: "IndicatorEnd", header: "<wx/stc/stc.h>".}
proc setPositionCacheSize*(this: var WxStyledTextCtrl; size: cint) {.cdecl, 
    importcpp: "SetPositionCacheSize", header: "<wx/stc/stc.h>".}
proc getPositionCacheSize*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetPositionCacheSize", header: "<wx/stc/stc.h>".}
proc copyAllowLine*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "CopyAllowLine", header: "<wx/stc/stc.h>".}
proc getCharacterPointer*(this: WxStyledTextCtrl): cstring {.noSideEffect, 
    cdecl, importcpp: "GetCharacterPointer", header: "<wx/stc/stc.h>".}
proc getRangePointer*(this: WxStyledTextCtrl; position: cint; rangeLength: cint): cstring {.
    noSideEffect, cdecl, importcpp: "GetRangePointer", header: "<wx/stc/stc.h>".}
proc getGapPosition*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetGapPosition", header: "<wx/stc/stc.h>".}
proc setKeysUnicode*(this: var WxStyledTextCtrl; keysUnicode: bool) {.cdecl, 
    importcpp: "SetKeysUnicode", header: "<wx/stc/stc.h>".}
proc getKeysUnicode*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetKeysUnicode", header: "<wx/stc/stc.h>".}
proc indicatorSetAlpha*(this: var WxStyledTextCtrl; indicator: cint; alpha: cint) {.
    cdecl, importcpp: "IndicatorSetAlpha", header: "<wx/stc/stc.h>".}
proc indicatorGetAlpha*(this: WxStyledTextCtrl; indicator: cint): cint {.
    noSideEffect, cdecl, importcpp: "IndicatorGetAlpha", 
    header: "<wx/stc/stc.h>".}
proc indicatorSetOutlineAlpha*(this: var WxStyledTextCtrl; indicator: cint; 
                               alpha: cint) {.cdecl, 
    importcpp: "IndicatorSetOutlineAlpha", header: "<wx/stc/stc.h>".}
proc indicatorGetOutlineAlpha*(this: WxStyledTextCtrl; indicator: cint): cint {.
    noSideEffect, cdecl, importcpp: "IndicatorGetOutlineAlpha", 
    header: "<wx/stc/stc.h>".}
proc setExtraAscent*(this: var WxStyledTextCtrl; extraAscent: cint) {.cdecl, 
    importcpp: "SetExtraAscent", header: "<wx/stc/stc.h>".}
proc getExtraAscent*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetExtraAscent", header: "<wx/stc/stc.h>".}
proc setExtraDescent*(this: var WxStyledTextCtrl; extraDescent: cint) {.cdecl, 
    importcpp: "SetExtraDescent", header: "<wx/stc/stc.h>".}
proc getExtraDescent*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetExtraDescent", header: "<wx/stc/stc.h>".}
proc getMarkerSymbolDefined*(this: var WxStyledTextCtrl; markerNumber: cint): cint {.
    cdecl, importcpp: "GetMarkerSymbolDefined", header: "<wx/stc/stc.h>".}
proc marginSetText*(this: var WxStyledTextCtrl; line: cint; text: WxString) {.
    cdecl, importcpp: "MarginSetText", header: "<wx/stc/stc.h>".}
proc marginGetText*(this: WxStyledTextCtrl; line: cint): WxString {.
    noSideEffect, cdecl, importcpp: "MarginGetText", header: "<wx/stc/stc.h>".}
proc marginSetStyle*(this: var WxStyledTextCtrl; line: cint; style: cint) {.
    cdecl, importcpp: "MarginSetStyle", header: "<wx/stc/stc.h>".}
proc marginGetStyle*(this: WxStyledTextCtrl; line: cint): cint {.noSideEffect, 
    cdecl, importcpp: "MarginGetStyle", header: "<wx/stc/stc.h>".}
proc marginSetStyles*(this: var WxStyledTextCtrl; line: cint; styles: WxString) {.
    cdecl, importcpp: "MarginSetStyles", header: "<wx/stc/stc.h>".}
proc marginGetStyles*(this: WxStyledTextCtrl; line: cint): WxString {.
    noSideEffect, cdecl, importcpp: "MarginGetStyles", header: "<wx/stc/stc.h>".}
proc marginTextClearAll*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "MarginTextClearAll", header: "<wx/stc/stc.h>".}
proc marginSetStyleOffset*(this: var WxStyledTextCtrl; style: cint) {.cdecl, 
    importcpp: "MarginSetStyleOffset", header: "<wx/stc/stc.h>".}
proc marginGetStyleOffset*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "MarginGetStyleOffset", header: "<wx/stc/stc.h>".}
proc setMarginOptions*(this: var WxStyledTextCtrl; marginOptions: cint) {.cdecl, 
    importcpp: "SetMarginOptions", header: "<wx/stc/stc.h>".}
proc getMarginOptions*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetMarginOptions", header: "<wx/stc/stc.h>".}
proc annotationSetText*(this: var WxStyledTextCtrl; line: cint; text: WxString) {.
    cdecl, importcpp: "AnnotationSetText", header: "<wx/stc/stc.h>".}
proc annotationGetText*(this: WxStyledTextCtrl; line: cint): WxString {.
    noSideEffect, cdecl, importcpp: "AnnotationGetText", 
    header: "<wx/stc/stc.h>".}
proc annotationSetStyle*(this: var WxStyledTextCtrl; line: cint; style: cint) {.
    cdecl, importcpp: "AnnotationSetStyle", header: "<wx/stc/stc.h>".}
proc annotationGetStyle*(this: WxStyledTextCtrl; line: cint): cint {.
    noSideEffect, cdecl, importcpp: "AnnotationGetStyle", 
    header: "<wx/stc/stc.h>".}
proc annotationSetStyles*(this: var WxStyledTextCtrl; line: cint; 
                          styles: WxString) {.cdecl, 
    importcpp: "AnnotationSetStyles", header: "<wx/stc/stc.h>".}
proc annotationGetStyles*(this: WxStyledTextCtrl; line: cint): WxString {.
    noSideEffect, cdecl, importcpp: "AnnotationGetStyles", 
    header: "<wx/stc/stc.h>".}
proc annotationGetLines*(this: WxStyledTextCtrl; line: cint): cint {.
    noSideEffect, cdecl, importcpp: "AnnotationGetLines", 
    header: "<wx/stc/stc.h>".}
proc annotationClearAll*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "AnnotationClearAll", header: "<wx/stc/stc.h>".}
proc annotationSetVisible*(this: var WxStyledTextCtrl; visible: cint) {.cdecl, 
    importcpp: "AnnotationSetVisible", header: "<wx/stc/stc.h>".}
proc annotationGetVisible*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "AnnotationGetVisible", header: "<wx/stc/stc.h>".}
proc annotationSetStyleOffset*(this: var WxStyledTextCtrl; style: cint) {.cdecl, 
    importcpp: "AnnotationSetStyleOffset", header: "<wx/stc/stc.h>".}
proc annotationGetStyleOffset*(this: WxStyledTextCtrl): cint {.noSideEffect, 
    cdecl, importcpp: "AnnotationGetStyleOffset", header: "<wx/stc/stc.h>".}
proc addUndoAction*(this: var WxStyledTextCtrl; token: cint; flags: cint) {.
    cdecl, importcpp: "AddUndoAction", header: "<wx/stc/stc.h>".}
proc charPositionFromPoint*(this: var WxStyledTextCtrl; x: cint; y: cint): cint {.
    cdecl, importcpp: "CharPositionFromPoint", header: "<wx/stc/stc.h>".}
proc charPositionFromPointClose*(this: var WxStyledTextCtrl; x: cint; y: cint): cint {.
    cdecl, importcpp: "CharPositionFromPointClose", header: "<wx/stc/stc.h>".}
proc setMultipleSelection*(this: var WxStyledTextCtrl; multipleSelection: bool) {.
    cdecl, importcpp: "SetMultipleSelection", header: "<wx/stc/stc.h>".}
proc getMultipleSelection*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "GetMultipleSelection", header: "<wx/stc/stc.h>".}
proc setAdditionalSelectionTyping*(this: var WxStyledTextCtrl; 
                                   additionalSelectionTyping: bool) {.cdecl, 
    importcpp: "SetAdditionalSelectionTyping", header: "<wx/stc/stc.h>".}
proc getAdditionalSelectionTyping*(this: WxStyledTextCtrl): bool {.noSideEffect, 
    cdecl, importcpp: "GetAdditionalSelectionTyping", header: "<wx/stc/stc.h>".}
proc setAdditionalCaretsBlink*(this: var WxStyledTextCtrl; 
                               additionalCaretsBlink: bool) {.cdecl, 
    importcpp: "SetAdditionalCaretsBlink", header: "<wx/stc/stc.h>".}
proc getAdditionalCaretsBlink*(this: WxStyledTextCtrl): bool {.noSideEffect, 
    cdecl, importcpp: "GetAdditionalCaretsBlink", header: "<wx/stc/stc.h>".}
proc setAdditionalCaretsVisible*(this: var WxStyledTextCtrl; 
                                 additionalCaretsBlink: bool) {.cdecl, 
    importcpp: "SetAdditionalCaretsVisible", header: "<wx/stc/stc.h>".}
proc getAdditionalCaretsVisible*(this: WxStyledTextCtrl): bool {.noSideEffect, 
    cdecl, importcpp: "GetAdditionalCaretsVisible", header: "<wx/stc/stc.h>".}
proc getSelections*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetSelections", header: "<wx/stc/stc.h>".}
proc clearSelections*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "ClearSelections", header: "<wx/stc/stc.h>".}
proc addSelection*(this: var WxStyledTextCtrl; caret: cint; anchor: cint): cint {.
    discardable, cdecl, importcpp: "AddSelection", header: "<wx/stc/stc.h>".}
proc setMainSelection*(this: var WxStyledTextCtrl; selection: cint) {.cdecl, 
    importcpp: "SetMainSelection", header: "<wx/stc/stc.h>".}
proc getMainSelection*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetMainSelection", header: "<wx/stc/stc.h>".}
proc setSelectionNCaret*(this: var WxStyledTextCtrl; selection: cint; pos: cint) {.
    cdecl, importcpp: "SetSelectionNCaret", header: "<wx/stc/stc.h>".}
proc getSelectionNCaret*(this: WxStyledTextCtrl; selection: cint): cint {.
    noSideEffect, cdecl, importcpp: "GetSelectionNCaret", 
    header: "<wx/stc/stc.h>".}
proc setSelectionNAnchor*(this: var WxStyledTextCtrl; selection: cint; 
                          posAnchor: cint) {.cdecl, 
    importcpp: "SetSelectionNAnchor", header: "<wx/stc/stc.h>".}
proc getSelectionNAnchor*(this: WxStyledTextCtrl; selection: cint): cint {.
    noSideEffect, cdecl, importcpp: "GetSelectionNAnchor", 
    header: "<wx/stc/stc.h>".}
proc setSelectionNCaretVirtualSpace*(this: var WxStyledTextCtrl; 
                                     selection: cint; space: cint) {.cdecl, 
    importcpp: "SetSelectionNCaretVirtualSpace", header: "<wx/stc/stc.h>".}
proc getSelectionNCaretVirtualSpace*(this: WxStyledTextCtrl; selection: cint): cint {.
    noSideEffect, cdecl, importcpp: "GetSelectionNCaretVirtualSpace", 
    header: "<wx/stc/stc.h>".}
proc setSelectionNAnchorVirtualSpace*(this: var WxStyledTextCtrl; 
                                      selection: cint; space: cint) {.cdecl, 
    importcpp: "SetSelectionNAnchorVirtualSpace", header: "<wx/stc/stc.h>".}
proc getSelectionNAnchorVirtualSpace*(this: WxStyledTextCtrl; selection: cint): cint {.
    noSideEffect, cdecl, importcpp: "GetSelectionNAnchorVirtualSpace", 
    header: "<wx/stc/stc.h>".}
proc setSelectionNStart*(this: var WxStyledTextCtrl; selection: cint; pos: cint) {.
    cdecl, importcpp: "SetSelectionNStart", header: "<wx/stc/stc.h>".}
proc getSelectionNStart*(this: WxStyledTextCtrl; selection: cint): cint {.
    noSideEffect, cdecl, importcpp: "GetSelectionNStart", 
    header: "<wx/stc/stc.h>".}
proc setSelectionNEnd*(this: var WxStyledTextCtrl; selection: cint; pos: cint) {.
    cdecl, importcpp: "SetSelectionNEnd", header: "<wx/stc/stc.h>".}
proc getSelectionNEnd*(this: WxStyledTextCtrl; selection: cint): cint {.
    noSideEffect, cdecl, importcpp: "GetSelectionNEnd", header: "<wx/stc/stc.h>".}
proc setRectangularSelectionCaret*(this: var WxStyledTextCtrl; pos: cint) {.
    cdecl, importcpp: "SetRectangularSelectionCaret", header: "<wx/stc/stc.h>".}
proc getRectangularSelectionCaret*(this: WxStyledTextCtrl): cint {.noSideEffect, 
    cdecl, importcpp: "GetRectangularSelectionCaret", header: "<wx/stc/stc.h>".}
proc setRectangularSelectionAnchor*(this: var WxStyledTextCtrl; posAnchor: cint) {.
    cdecl, importcpp: "SetRectangularSelectionAnchor", header: "<wx/stc/stc.h>".}
proc getRectangularSelectionAnchor*(this: WxStyledTextCtrl): cint {.
    noSideEffect, cdecl, importcpp: "GetRectangularSelectionAnchor", 
    header: "<wx/stc/stc.h>".}
proc setRectangularSelectionCaretVirtualSpace*(this: var WxStyledTextCtrl; 
    space: cint) {.cdecl, importcpp: "SetRectangularSelectionCaretVirtualSpace", 
                   header: "<wx/stc/stc.h>".}
proc getRectangularSelectionCaretVirtualSpace*(this: WxStyledTextCtrl): cint {.
    noSideEffect, cdecl, importcpp: "GetRectangularSelectionCaretVirtualSpace", 
    header: "<wx/stc/stc.h>".}
proc setRectangularSelectionAnchorVirtualSpace*(this: var WxStyledTextCtrl; 
    space: cint) {.cdecl, 
                   importcpp: "SetRectangularSelectionAnchorVirtualSpace", 
                   header: "<wx/stc/stc.h>".}
proc getRectangularSelectionAnchorVirtualSpace*(this: WxStyledTextCtrl): cint {.
    noSideEffect, cdecl, importcpp: "GetRectangularSelectionAnchorVirtualSpace", 
    header: "<wx/stc/stc.h>".}
proc setVirtualSpaceOptions*(this: var WxStyledTextCtrl; 
                             virtualSpaceOptions: cint) {.cdecl, 
    importcpp: "SetVirtualSpaceOptions", header: "<wx/stc/stc.h>".}
proc getVirtualSpaceOptions*(this: WxStyledTextCtrl): cint {.noSideEffect, 
    cdecl, importcpp: "GetVirtualSpaceOptions", header: "<wx/stc/stc.h>".}
proc setRectangularSelectionModifier*(this: var WxStyledTextCtrl; modifier: cint) {.
    cdecl, importcpp: "SetRectangularSelectionModifier", 
    header: "<wx/stc/stc.h>".}
proc getRectangularSelectionModifier*(this: WxStyledTextCtrl): cint {.
    noSideEffect, cdecl, importcpp: "GetRectangularSelectionModifier", 
    header: "<wx/stc/stc.h>".}
proc setAdditionalSelForeground*(this: var WxStyledTextCtrl; fore: WxColour) {.
    cdecl, importcpp: "SetAdditionalSelForeground", header: "<wx/stc/stc.h>".}
proc setAdditionalSelBackground*(this: var WxStyledTextCtrl; back: WxColour) {.
    cdecl, importcpp: "SetAdditionalSelBackground", header: "<wx/stc/stc.h>".}
proc setAdditionalSelAlpha*(this: var WxStyledTextCtrl; alpha: cint) {.cdecl, 
    importcpp: "SetAdditionalSelAlpha", header: "<wx/stc/stc.h>".}
proc getAdditionalSelAlpha*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetAdditionalSelAlpha", header: "<wx/stc/stc.h>".}
proc setAdditionalCaretForeground*(this: var WxStyledTextCtrl; fore: WxColour) {.
    cdecl, importcpp: "SetAdditionalCaretForeground", header: "<wx/stc/stc.h>".}
proc getAdditionalCaretForeground*(this: WxStyledTextCtrl): WxColour {.
    noSideEffect, cdecl, importcpp: "GetAdditionalCaretForeground", 
    header: "<wx/stc/stc.h>".}
proc rotateSelection*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "RotateSelection", header: "<wx/stc/stc.h>".}
proc swapMainAnchorCaret*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "SwapMainAnchorCaret", header: "<wx/stc/stc.h>".}
proc changeLexerState*(this: var WxStyledTextCtrl; start: cint; `end`: cint): cint {.
    cdecl, importcpp: "ChangeLexerState", header: "<wx/stc/stc.h>".}
proc contractedFoldNext*(this: var WxStyledTextCtrl; lineStart: cint): cint {.
    cdecl, importcpp: "ContractedFoldNext", header: "<wx/stc/stc.h>".}
proc verticalCentreCaret*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "VerticalCentreCaret", header: "<wx/stc/stc.h>".}
proc moveSelectedLinesUp*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "MoveSelectedLinesUp", header: "<wx/stc/stc.h>".}
proc moveSelectedLinesDown*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "MoveSelectedLinesDown", header: "<wx/stc/stc.h>".}
proc setIdentifier*(this: var WxStyledTextCtrl; identifier: cint) {.cdecl, 
    importcpp: "SetIdentifier", header: "<wx/stc/stc.h>".}
proc getIdentifier*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetIdentifier", header: "<wx/stc/stc.h>".}
proc rGBAImageSetWidth*(this: var WxStyledTextCtrl; width: cint) {.cdecl, 
    importcpp: "RGBAImageSetWidth", header: "<wx/stc/stc.h>".}
proc rGBAImageSetHeight*(this: var WxStyledTextCtrl; height: cint) {.cdecl, 
    importcpp: "RGBAImageSetHeight", header: "<wx/stc/stc.h>".}
proc markerDefineRGBAImage*(this: var WxStyledTextCtrl; markerNumber: cint; 
                            pixels: ptr cuchar) {.cdecl, 
    importcpp: "MarkerDefineRGBAImage", header: "<wx/stc/stc.h>".}
proc registerRGBAImage*(this: var WxStyledTextCtrl; `type`: cint; 
                        pixels: ptr cuchar) {.cdecl, 
    importcpp: "RegisterRGBAImage", header: "<wx/stc/stc.h>".}
proc scrollToStart*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "ScrollToStart", header: "<wx/stc/stc.h>".}
proc scrollToEnd*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "ScrollToEnd", 
    header: "<wx/stc/stc.h>".}
proc setTechnology*(this: var WxStyledTextCtrl; technology: cint) {.cdecl, 
    importcpp: "SetTechnology", header: "<wx/stc/stc.h>".}
proc getTechnology*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetTechnology", header: "<wx/stc/stc.h>".}
proc createLoader*(this: WxStyledTextCtrl; bytes: cint): pointer {.noSideEffect, 
    cdecl, importcpp: "CreateLoader", header: "<wx/stc/stc.h>".}
proc startRecord*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "StartRecord", 
    header: "<wx/stc/stc.h>".}
proc stopRecord*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "StopRecord", 
    header: "<wx/stc/stc.h>".}
proc setLexer*(this: var WxStyledTextCtrl; lexer: cint) {.cdecl, 
    importcpp: "SetLexer", header: "<wx/stc/stc.h>".}
proc getLexer*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetLexer", header: "<wx/stc/stc.h>".}
proc colourise*(this: var WxStyledTextCtrl; start: cint; `end`: cint) {.cdecl, 
    importcpp: "Colourise", header: "<wx/stc/stc.h>".}
proc setProperty*(this: var WxStyledTextCtrl; key: WxString; value: WxString) {.
    cdecl, importcpp: "SetProperty", header: "<wx/stc/stc.h>".}
proc setKeyWords*(this: var WxStyledTextCtrl; keywordSet: cint; 
                  keyWords: WxString) {.cdecl, importcpp: "SetKeyWords", 
                                        header: "<wx/stc/stc.h>".}
proc setLexerLanguage*(this: var WxStyledTextCtrl; language: WxString) {.cdecl, 
    importcpp: "SetLexerLanguage", header: "<wx/stc/stc.h>".}
proc getProperty*(this: var WxStyledTextCtrl; key: WxString): WxString {.cdecl, 
    importcpp: "GetProperty", header: "<wx/stc/stc.h>".}
proc getPropertyExpanded*(this: var WxStyledTextCtrl; key: WxString): WxString {.
    cdecl, importcpp: "GetPropertyExpanded", header: "<wx/stc/stc.h>".}
proc getPropertyInt*(this: WxStyledTextCtrl; key: WxString): cint {.
    noSideEffect, cdecl, importcpp: "GetPropertyInt", header: "<wx/stc/stc.h>".}
proc getStyleBitsNeeded*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetStyleBitsNeeded", header: "<wx/stc/stc.h>".}
proc privateLexerCall*(this: var WxStyledTextCtrl; operation: cint; 
                       pointer: pointer): pointer {.cdecl, 
    importcpp: "PrivateLexerCall", header: "<wx/stc/stc.h>".}
proc propertyNames*(this: WxStyledTextCtrl): WxString {.noSideEffect, cdecl, 
    importcpp: "PropertyNames", header: "<wx/stc/stc.h>".}
proc propertyType*(this: var WxStyledTextCtrl; name: WxString): cint {.cdecl, 
    importcpp: "PropertyType", header: "<wx/stc/stc.h>".}
proc describeProperty*(this: WxStyledTextCtrl; name: WxString): WxString {.
    noSideEffect, cdecl, importcpp: "DescribeProperty", header: "<wx/stc/stc.h>".}
proc describeKeyWordSets*(this: WxStyledTextCtrl): WxString {.noSideEffect, 
    cdecl, importcpp: "DescribeKeyWordSets", header: "<wx/stc/stc.h>".}
proc getCurrentLine*(this: var WxStyledTextCtrl): cint {.cdecl, 
    importcpp: "GetCurrentLine", header: "<wx/stc/stc.h>".}
proc styleSetSpec*(this: var WxStyledTextCtrl; styleNum: cint; spec: WxString) {.
    cdecl, importcpp: "StyleSetSpec", header: "<wx/stc/stc.h>".}
proc styleGetFont*(this: var WxStyledTextCtrl; style: cint): WxFont {.cdecl, 
    importcpp: "StyleGetFont", header: "<wx/stc/stc.h>".}
proc styleSetFont*(this: var WxStyledTextCtrl; styleNum: cint; font: var WxFont) {.
    cdecl, importcpp: "StyleSetFont", header: "<wx/stc/stc.h>".}
proc styleSetFontAttr*(this: var WxStyledTextCtrl; styleNum: cint; size: cint; 
                       faceName: WxString; bold: bool; italic: bool; 
                       underline: bool; 
                       encoding: WxFontEncoding = wxFONTENCODING_DEFAULT) {.
    cdecl, importcpp: "StyleSetFontAttr", header: "<wx/stc/stc.h>".}
proc styleSetCharacterSet*(this: var WxStyledTextCtrl; style: cint; 
                           characterSet: cint) {.cdecl, 
    importcpp: "StyleSetCharacterSet", header: "<wx/stc/stc.h>".}
proc styleSetFontEncoding*(this: var WxStyledTextCtrl; style: cint; 
                           encoding: WxFontEncoding) {.cdecl, 
    importcpp: "StyleSetFontEncoding", header: "<wx/stc/stc.h>".}
proc cmdKeyExecute*(this: var WxStyledTextCtrl; cmd: cint) {.cdecl, 
    importcpp: "CmdKeyExecute", header: "<wx/stc/stc.h>".}
proc setMargins*(this: var WxStyledTextCtrl; left: cint; right: cint) {.cdecl, 
    importcpp: "SetMargins", header: "<wx/stc/stc.h>".}
proc pointFromPosition*(this: var WxStyledTextCtrl; pos: cint): WxPoint {.cdecl, 
    importcpp: "PointFromPosition", header: "<wx/stc/stc.h>".}
proc scrollToLine*(this: var WxStyledTextCtrl; line: cint) {.cdecl, 
    importcpp: "ScrollToLine", header: "<wx/stc/stc.h>".}
proc scrollToColumn*(this: var WxStyledTextCtrl; column: cint) {.cdecl, 
    importcpp: "ScrollToColumn", header: "<wx/stc/stc.h>".}
proc sendMsg*(this: WxStyledTextCtrl; msg: cint; wp: culong = 0; lp: clong = 0): clong {.
    noSideEffect, cdecl, importcpp: "SendMsg", header: "<wx/stc/stc.h>".}
proc setVScrollBar*(this: var WxStyledTextCtrl; bar: ptr WxScrollBar) {.cdecl, 
    importcpp: "SetVScrollBar", header: "<wx/stc/stc.h>".}
proc setHScrollBar*(this: var WxStyledTextCtrl; bar: ptr WxScrollBar) {.cdecl, 
    importcpp: "SetHScrollBar", header: "<wx/stc/stc.h>".}
proc getLastKeydownProcessed*(this: var WxStyledTextCtrl): bool {.cdecl, 
    importcpp: "GetLastKeydownProcessed", header: "<wx/stc/stc.h>".}
proc setLastKeydownProcessed*(this: var WxStyledTextCtrl; val: bool) {.cdecl, 
    importcpp: "SetLastKeydownProcessed", header: "<wx/stc/stc.h>".}
proc saveFile*(this: var WxStyledTextCtrl; filename: WxString): bool {.cdecl, 
    importcpp: "SaveFile", header: "<wx/stc/stc.h>".}
proc loadFile*(this: var WxStyledTextCtrl; filename: WxString): bool {.cdecl, 
    importcpp: "LoadFile", header: "<wx/stc/stc.h>".}
proc doDragOver*(this: var WxStyledTextCtrl; x: WxCoord; y: WxCoord; 
                 def: WxDragResult): WxDragResult {.cdecl, 
    importcpp: "DoDragOver", header: "<wx/stc/stc.h>".}
proc doDropText*(this: var WxStyledTextCtrl; x: clong; y: clong; data: WxString): bool {.
    cdecl, importcpp: "DoDropText", header: "<wx/stc/stc.h>".}
proc setUseAntiAliasing*(this: var WxStyledTextCtrl; useAA: bool) {.cdecl, 
    importcpp: "SetUseAntiAliasing", header: "<wx/stc/stc.h>".}
proc getUseAntiAliasing*(this: var WxStyledTextCtrl): bool {.cdecl, 
    importcpp: "GetUseAntiAliasing", header: "<wx/stc/stc.h>".}
proc annotationClearLine*(this: var WxStyledTextCtrl; line: cint) {.cdecl, 
    importcpp: "AnnotationClearLine", header: "<wx/stc/stc.h>".}
proc addTextRaw*(this: var WxStyledTextCtrl; text: cstring; length: cint = - 1) {.
    cdecl, importcpp: "AddTextRaw", header: "<wx/stc/stc.h>".}
proc insertTextRaw*(this: var WxStyledTextCtrl; pos: cint; text: cstring) {.
    cdecl, importcpp: "InsertTextRaw", header: "<wx/stc/stc.h>".}
proc getCurLineRaw*(this: var WxStyledTextCtrl; linePos: ptr cint = nil): WxCharBuffer {.
    cdecl, importcpp: "GetCurLineRaw", header: "<wx/stc/stc.h>".}
proc getLineRaw*(this: var WxStyledTextCtrl; line: cint): WxCharBuffer {.cdecl, 
    importcpp: "GetLineRaw", header: "<wx/stc/stc.h>".}
proc getSelectedTextRaw*(this: var WxStyledTextCtrl): WxCharBuffer {.cdecl, 
    importcpp: "GetSelectedTextRaw", header: "<wx/stc/stc.h>".}
proc getTextRangeRaw*(this: var WxStyledTextCtrl; startPos: cint; endPos: cint): WxCharBuffer {.
    cdecl, importcpp: "GetTextRangeRaw", header: "<wx/stc/stc.h>".}
proc setTextRaw*(this: var WxStyledTextCtrl; text: cstring) {.cdecl, 
    importcpp: "SetTextRaw", header: "<wx/stc/stc.h>".}
proc getTextRaw*(this: var WxStyledTextCtrl): WxCharBuffer {.cdecl, 
    importcpp: "GetTextRaw", header: "<wx/stc/stc.h>".}
proc appendTextRaw*(this: var WxStyledTextCtrl; text: cstring; 
                    length: cint = - 1) {.cdecl, importcpp: "AppendTextRaw", 
    header: "<wx/stc/stc.h>".}
proc writeText*(this: var WxStyledTextCtrl; text: WxString) {.cdecl, 
    importcpp: "WriteText", header: "<wx/stc/stc.h>".}
proc remove*(this: var WxStyledTextCtrl; `from`: clong; to: clong) {.cdecl, 
    importcpp: "Remove", header: "<wx/stc/stc.h>".}
proc replace*(this: var WxStyledTextCtrl; `from`: clong; to: clong; 
              text: WxString) {.cdecl, importcpp: "Replace", 
                                header: "<wx/stc/stc.h>".}
proc setInsertionPoint*(this: var WxStyledTextCtrl; pos: clong) {.cdecl, 
    importcpp: "SetInsertionPoint", header: "<wx/stc/stc.h>".}
proc getInsertionPoint*(this: WxStyledTextCtrl): clong {.noSideEffect, cdecl, 
    importcpp: "GetInsertionPoint", header: "<wx/stc/stc.h>".}
proc getLastPosition*(this: WxStyledTextCtrl): clong {.noSideEffect, cdecl, 
    importcpp: "GetLastPosition", header: "<wx/stc/stc.h>".}
proc setSelection*(this: var WxStyledTextCtrl; `from`: clong; to: clong) {.
    cdecl, importcpp: "SetSelection", header: "<wx/stc/stc.h>".}
proc selectNone*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "SelectNone", 
    header: "<wx/stc/stc.h>".}
proc getSelection*(this: WxStyledTextCtrl; `from`: ptr clong; to: ptr clong) {.
    noSideEffect, cdecl, importcpp: "GetSelection", header: "<wx/stc/stc.h>".}
proc getSelection*(this: var WxStyledTextCtrl; `from`: ptr cint; to: ptr cint) {.
    cdecl, importcpp: "GetSelection", header: "<wx/stc/stc.h>".}
proc isEditable*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "IsEditable", header: "<wx/stc/stc.h>".}
proc setEditable*(this: var WxStyledTextCtrl; editable: bool) {.cdecl, 
    importcpp: "SetEditable", header: "<wx/stc/stc.h>".}
proc getLineLength*(this: WxStyledTextCtrl; lineNo: clong): cint {.noSideEffect, 
    cdecl, importcpp: "GetLineLength", header: "<wx/stc/stc.h>".}
proc getLineText*(this: WxStyledTextCtrl; lineNo: clong): WxString {.
    noSideEffect, cdecl, importcpp: "GetLineText", header: "<wx/stc/stc.h>".}
proc getNumberOfLines*(this: WxStyledTextCtrl): cint {.noSideEffect, cdecl, 
    importcpp: "GetNumberOfLines", header: "<wx/stc/stc.h>".}
proc isModified*(this: WxStyledTextCtrl): bool {.noSideEffect, cdecl, 
    importcpp: "IsModified", header: "<wx/stc/stc.h>".}
proc markDirty*(this: var WxStyledTextCtrl) {.cdecl, importcpp: "MarkDirty", 
    header: "<wx/stc/stc.h>".}
proc discardEdits*(this: var WxStyledTextCtrl) {.cdecl, 
    importcpp: "DiscardEdits", header: "<wx/stc/stc.h>".}
proc setStyle*(this: var WxStyledTextCtrl; start: clong; `end`: clong; 
               style: WxTextAttr): bool {.discardable, cdecl, 
    importcpp: "SetStyle", header: "<wx/stc/stc.h>".}
proc getStyle*(this: var WxStyledTextCtrl; position: clong; 
               style: var WxTextAttr): bool {.cdecl, importcpp: "GetStyle", 
    header: "<wx/stc/stc.h>".}
proc setDefaultStyle*(this: var WxStyledTextCtrl; style: WxTextAttr): bool {.
    discardable, cdecl, importcpp: "SetDefaultStyle", header: "<wx/stc/stc.h>".}
proc xYToPosition*(this: WxStyledTextCtrl; x: clong; y: clong): clong {.
    noSideEffect, cdecl, importcpp: "XYToPosition", header: "<wx/stc/stc.h>".}
proc positionToXY*(this: WxStyledTextCtrl; pos: clong; x: ptr clong; 
                   y: ptr clong): bool {.noSideEffect, cdecl, 
    importcpp: "PositionToXY", header: "<wx/stc/stc.h>".}
proc showPosition*(this: var WxStyledTextCtrl; pos: clong) {.cdecl, 
    importcpp: "ShowPosition", header: "<wx/stc/stc.h>".}
proc hitTest*(this: WxStyledTextCtrl; pt: WxPoint; pos: ptr clong): WxTextCtrlHitTestResult {.
    noSideEffect, cdecl, importcpp: "HitTest", header: "<wx/stc/stc.h>".}
proc hitTest*(this: WxStyledTextCtrl; pt: WxPoint; col: ptr WxTextCoord; 
              row: ptr WxTextCoord): WxTextCtrlHitTestResult {.noSideEffect, 
    cdecl, importcpp: "HitTest", header: "<wx/stc/stc.h>".}

type 
  WxStyledTextEvent* {.importcpp: "wxStyledTextEvent", header: "<wx/stc/stc.h>".} = object of WxCommandEvent
  

proc constructwxStyledTextEvent*(commandType: WxEventType = 0; id: cint = 0): WxStyledTextEvent {.
    cdecl, constructor, importcpp: "wxStyledTextEvent(@)", 
    header: "<wx/stc/stc.h>".}
proc destroywxStyledTextEvent*(this: var WxStyledTextEvent) {.cdecl, 
    importcpp: "#.~wxStyledTextEvent()", header: "<wx/stc/stc.h>".}
proc setPosition*(this: var WxStyledTextEvent; pos: cint) {.cdecl, 
    importcpp: "SetPosition", header: "<wx/stc/stc.h>".}
proc setKey*(this: var WxStyledTextEvent; k: cint) {.cdecl, importcpp: "SetKey", 
    header: "<wx/stc/stc.h>".}
proc setModifiers*(this: var WxStyledTextEvent; m: cint) {.cdecl, 
    importcpp: "SetModifiers", header: "<wx/stc/stc.h>".}
proc setModificationType*(this: var WxStyledTextEvent; t: cint) {.cdecl, 
    importcpp: "SetModificationType", header: "<wx/stc/stc.h>".}
proc setText*(this: var WxStyledTextEvent; t: WxString) {.cdecl, 
    importcpp: "SetText", header: "<wx/stc/stc.h>".}
proc setLength*(this: var WxStyledTextEvent; len: cint) {.cdecl, 
    importcpp: "SetLength", header: "<wx/stc/stc.h>".}
proc setLinesAdded*(this: var WxStyledTextEvent; num: cint) {.cdecl, 
    importcpp: "SetLinesAdded", header: "<wx/stc/stc.h>".}
proc setLine*(this: var WxStyledTextEvent; val: cint) {.cdecl, 
    importcpp: "SetLine", header: "<wx/stc/stc.h>".}
proc setFoldLevelNow*(this: var WxStyledTextEvent; val: cint) {.cdecl, 
    importcpp: "SetFoldLevelNow", header: "<wx/stc/stc.h>".}
proc setFoldLevelPrev*(this: var WxStyledTextEvent; val: cint) {.cdecl, 
    importcpp: "SetFoldLevelPrev", header: "<wx/stc/stc.h>".}
proc setMargin*(this: var WxStyledTextEvent; val: cint) {.cdecl, 
    importcpp: "SetMargin", header: "<wx/stc/stc.h>".}
proc setMessage*(this: var WxStyledTextEvent; val: cint) {.cdecl, 
    importcpp: "SetMessage", header: "<wx/stc/stc.h>".}
proc setWParam*(this: var WxStyledTextEvent; val: cint) {.cdecl, 
    importcpp: "SetWParam", header: "<wx/stc/stc.h>".}
proc setLParam*(this: var WxStyledTextEvent; val: cint) {.cdecl, 
    importcpp: "SetLParam", header: "<wx/stc/stc.h>".}
proc setListType*(this: var WxStyledTextEvent; val: cint) {.cdecl, 
    importcpp: "SetListType", header: "<wx/stc/stc.h>".}
proc setX*(this: var WxStyledTextEvent; val: cint) {.cdecl, importcpp: "SetX", 
    header: "<wx/stc/stc.h>".}
proc setY*(this: var WxStyledTextEvent; val: cint) {.cdecl, importcpp: "SetY", 
    header: "<wx/stc/stc.h>".}
proc setToken*(this: var WxStyledTextEvent; val: cint) {.cdecl, 
    importcpp: "SetToken", header: "<wx/stc/stc.h>".}
proc setAnnotationLinesAdded*(this: var WxStyledTextEvent; val: cint) {.cdecl, 
    importcpp: "SetAnnotationLinesAdded", header: "<wx/stc/stc.h>".}
proc setUpdated*(this: var WxStyledTextEvent; val: cint) {.cdecl, 
    importcpp: "SetUpdated", header: "<wx/stc/stc.h>".}
proc setDragText*(this: var WxStyledTextEvent; val: WxString) {.cdecl, 
    importcpp: "SetDragText", header: "<wx/stc/stc.h>".}
proc setDragFlags*(this: var WxStyledTextEvent; flags: cint) {.cdecl, 
    importcpp: "SetDragFlags", header: "<wx/stc/stc.h>".}
proc setDragResult*(this: var WxStyledTextEvent; val: WxDragResult) {.cdecl, 
    importcpp: "SetDragResult", header: "<wx/stc/stc.h>".}
proc setDragAllowMove*(this: var WxStyledTextEvent; allow: bool) {.cdecl, 
    importcpp: "SetDragAllowMove", header: "<wx/stc/stc.h>".}
proc getPosition*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetPosition", header: "<wx/stc/stc.h>".}
proc getKey*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetKey", header: "<wx/stc/stc.h>".}
proc getModifiers*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetModifiers", header: "<wx/stc/stc.h>".}
proc getModificationType*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetModificationType", header: "<wx/stc/stc.h>".}
proc getText*(this: WxStyledTextEvent): WxString {.noSideEffect, cdecl, 
    importcpp: "GetText", header: "<wx/stc/stc.h>".}
proc getLength*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetLength", header: "<wx/stc/stc.h>".}
proc getLinesAdded*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetLinesAdded", header: "<wx/stc/stc.h>".}
proc getLine*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetLine", header: "<wx/stc/stc.h>".}
proc getFoldLevelNow*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetFoldLevelNow", header: "<wx/stc/stc.h>".}
proc getFoldLevelPrev*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetFoldLevelPrev", header: "<wx/stc/stc.h>".}
proc getMargin*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetMargin", header: "<wx/stc/stc.h>".}
proc getMessage*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetMessage", header: "<wx/stc/stc.h>".}
proc getWParam*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetWParam", header: "<wx/stc/stc.h>".}
proc getLParam*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetLParam", header: "<wx/stc/stc.h>".}
proc getListType*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetListType", header: "<wx/stc/stc.h>".}
proc getX*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetX", header: "<wx/stc/stc.h>".}
proc getY*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetY", header: "<wx/stc/stc.h>".}
proc getToken*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetToken", header: "<wx/stc/stc.h>".}
proc getAnnotationsLinesAdded*(this: WxStyledTextEvent): cint {.noSideEffect, 
    cdecl, importcpp: "GetAnnotationsLinesAdded", header: "<wx/stc/stc.h>".}
proc getUpdated*(this: WxStyledTextEvent): cint {.noSideEffect, cdecl, 
    importcpp: "GetUpdated", header: "<wx/stc/stc.h>".}
proc getDragText*(this: var WxStyledTextEvent): WxString {.cdecl, 
    importcpp: "GetDragText", header: "<wx/stc/stc.h>".}
proc getDragFlags*(this: var WxStyledTextEvent): cint {.cdecl, 
    importcpp: "GetDragFlags", header: "<wx/stc/stc.h>".}
proc getDragResult*(this: var WxStyledTextEvent): WxDragResult {.cdecl, 
    importcpp: "GetDragResult", header: "<wx/stc/stc.h>".}
proc getDragAllowMove*(this: var WxStyledTextEvent): bool {.cdecl, 
    importcpp: "GetDragAllowMove", header: "<wx/stc/stc.h>".}
proc getShift*(this: WxStyledTextEvent): bool {.noSideEffect, cdecl, 
    importcpp: "GetShift", header: "<wx/stc/stc.h>".}
proc getControl*(this: WxStyledTextEvent): bool {.noSideEffect, cdecl, 
    importcpp: "GetControl", header: "<wx/stc/stc.h>".}
proc getAlt*(this: WxStyledTextEvent): bool {.noSideEffect, cdecl, 
    importcpp: "GetAlt", header: "<wx/stc/stc.h>".}
proc clone*(this: WxStyledTextEvent): ptr WxEvent {.noSideEffect, cdecl, 
    importcpp: "Clone", header: "<wx/stc/stc.h>".}
var wxEVT_STC_CHANGE* {.importcpp: "wxEVT_STC_CHANGE", header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_STYLENEEDED* {.importcpp: "wxEVT_STC_STYLENEEDED", 
                             header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_CHARADDED* {.importcpp: "wxEVT_STC_CHARADDED", 
                           header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_SAVEPOINTREACHED* {.importcpp: "wxEVT_STC_SAVEPOINTREACHED", 
                                  header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_SAVEPOINTLEFT* {.importcpp: "wxEVT_STC_SAVEPOINTLEFT", 
                               header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_ROMODIFYATTEMPT* {.importcpp: "wxEVT_STC_ROMODIFYATTEMPT", 
                                 header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_KEY* {.importcpp: "wxEVT_STC_KEY", header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_DOUBLECLICK* {.importcpp: "wxEVT_STC_DOUBLECLICK", 
                             header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_UPDATEUI* {.importcpp: "wxEVT_STC_UPDATEUI", 
                          header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_MODIFIED* {.importcpp: "wxEVT_STC_MODIFIED", 
                          header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_MACRORECORD* {.importcpp: "wxEVT_STC_MACRORECORD", 
                             header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_MARGINCLICK* {.importcpp: "wxEVT_STC_MARGINCLICK", 
                             header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_NEEDSHOWN* {.importcpp: "wxEVT_STC_NEEDSHOWN", 
                           header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_PAINTED* {.importcpp: "wxEVT_STC_PAINTED", 
                         header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_USERLISTSELECTION* {.importcpp: "wxEVT_STC_USERLISTSELECTION", 
                                   header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_URIDROPPED* {.importcpp: "wxEVT_STC_URIDROPPED", 
                            header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_DWELLSTART* {.importcpp: "wxEVT_STC_DWELLSTART", 
                            header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_DWELLEND* {.importcpp: "wxEVT_STC_DWELLEND", 
                          header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_START_DRAG* {.importcpp: "wxEVT_STC_START_DRAG", 
                            header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_DRAG_OVER* {.importcpp: "wxEVT_STC_DRAG_OVER", 
                           header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_DO_DROP* {.importcpp: "wxEVT_STC_DO_DROP", 
                         header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_ZOOM* {.importcpp: "wxEVT_STC_ZOOM", header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_HOTSPOT_CLICK* {.importcpp: "wxEVT_STC_HOTSPOT_CLICK", 
                               header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_HOTSPOT_DCLICK* {.importcpp: "wxEVT_STC_HOTSPOT_DCLICK", 
                                header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_CALLTIP_CLICK* {.importcpp: "wxEVT_STC_CALLTIP_CLICK", 
                               header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_AUTOCOMP_SELECTION* {.importcpp: "wxEVT_STC_AUTOCOMP_SELECTION", 
                                    header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_INDICATOR_CLICK* {.importcpp: "wxEVT_STC_INDICATOR_CLICK", 
                                 header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_INDICATOR_RELEASE* {.importcpp: "wxEVT_STC_INDICATOR_RELEASE", 
                                   header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_AUTOCOMP_CANCELLED* {.importcpp: "wxEVT_STC_AUTOCOMP_CANCELLED", 
                                    header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_AUTOCOMP_CHAR_DELETED* {.importcpp: "wxEVT_STC_AUTOCOMP_CHAR_DELETED", 
                                       header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

var wxEVT_STC_HOTSPOT_RELEASE_CLICK* {.importcpp: "wxEVT_STC_HOTSPOT_RELEASE_CLICK", 
                                       header: "<wx/stc/stc.h>".}: WxEventTypeTag[
    WxStyledTextEvent]

type 
  WxStyledTextEventFunction* = proc (a2: var WxStyledTextEvent) {.cdecl.}
